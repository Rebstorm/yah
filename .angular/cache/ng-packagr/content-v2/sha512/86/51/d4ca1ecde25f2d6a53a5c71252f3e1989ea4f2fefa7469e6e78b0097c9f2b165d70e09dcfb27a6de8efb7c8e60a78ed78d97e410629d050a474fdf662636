{"hash":"222d94b6c83e46f470c28f5bb781f9e5b0770c46","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { map, switchMap, timestamp, delay, repeat, filter, tap } from 'rxjs/operators';\nimport * as i1$1 from 'ngx-spinner';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { of, concat, EMPTY } from 'rxjs';\nimport * as i1 from '@angular/common/http';\nimport * as i2 from '@ngx-pwa/local-storage';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2$1 from '@angular/forms';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport * as i2$2 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport { trigger, transition, query, style, stagger, animate } from '@angular/animations';\n\nclass WeatherService {\n    constructor(http, localDb) {\n        this.http = http;\n        this.localDb = localDb;\n        this.WEATHER_ACTIVATED_KEY = 'WEATHER_ACTIVATED';\n        this.WEATHER_LONGITUDE_KEY = 'WEATHER_LONGITUDE';\n        this.WEATHER_LATITUDE_KEY = 'WEATHER_LATITUDE';\n        this.activated$ = localDb\n            .watch(this.WEATHER_ACTIVATED_KEY, {\n            type: 'boolean',\n        })\n            .pipe(map((isActivated) => (isActivated === undefined ? false : isActivated)));\n        this.longitude$ = localDb.watch(this.WEATHER_LONGITUDE_KEY, {\n            type: 'string',\n        });\n        this.latitude$ = localDb.watch(this.WEATHER_LATITUDE_KEY, {\n            type: 'string',\n        });\n    }\n    getCurrentWeatherInformation() {\n        return this.activated$.pipe(switchMap((isActivated) => {\n            return isActivated\n                ? this.http.get('https://api.met.no/weatherapi/locationforecast/2.0/compact?altitude=69&lat=50.8106855&lon=7.1414209')\n                : of(undefined);\n        }), timestamp(), switchMap(({ timestamp: ts, value: value }) => concat(of(value), EMPTY.pipe(delay(this.timeToNextHourInMs(ts))))), repeat());\n    }\n    timeToNextHourInMs(currentTimestampMs) {\n        const timestampSeconds = currentTimestampMs / 1000;\n        const numberOfSecondsIntoTheCurrentHour = timestampSeconds % 3600;\n        const numberOfSecondsToTheNextHour = 3600 - numberOfSecondsIntoTheCurrentHour;\n        return numberOfSecondsToTheNextHour * 1000;\n    }\n    setActivated(checked) {\n        return this.localDb.set(this.WEATHER_ACTIVATED_KEY, checked, {\n            type: 'boolean',\n        });\n    }\n    setLatitude(lat) {\n        return this.localDb.set(this.WEATHER_LATITUDE_KEY, lat, {\n            type: 'string',\n        });\n    }\n    setLongitude(long) {\n        return this.localDb.set(this.WEATHER_LONGITUDE_KEY, long, {\n            type: 'string',\n        });\n    }\n}\nWeatherService.ɵfac = function WeatherService_Factory(t) { return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageMap)); };\nWeatherService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: WeatherService, factory: WeatherService.ɵfac, providedIn: 'root' });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WeatherService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root',\n            }]\n    }], function () { return [{ type: i1.HttpClient }, { type: i2.StorageMap }]; }, null); })();\n\nfunction WeatherButtonComponent_div_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵtext(2, \"Jetzt\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵelement(4, \"img\", 9);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"./assets/\", ctx_r0.currentIcon ? ctx_r0.currentIcon : \"cloudy\", \".png\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.currentDegrees, \"\\u2103 \");\n} }\nfunction WeatherButtonComponent_div_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelementStart(1, \"div\", 11);\n    i0.ɵɵelementStart(2, \"div\", 12);\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4, \"N\\u00E4chste Stunde\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵelement(6, \"img\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 12);\n    i0.ɵɵelementStart(8, \"div\");\n    i0.ɵɵtext(9, \"N\\u00E4chste 12 Stunden\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\");\n    i0.ɵɵelement(11, \"img\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"./assets/\", ctx_r1.nextHourIcon ? ctx_r1.nextHourIcon : \"cloudy\", \".png\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"./assets/\", ctx_r1.next12HoursIcon ? ctx_r1.next12HoursIcon : \"cloudy\", \".png\", i0.ɵɵsanitizeUrl);\n} }\nclass WeatherButtonComponent {\n    constructor(spinner, weatherService) {\n        this.spinner = spinner;\n        this.weatherService = weatherService;\n        this.spinnerName = 'weather-spinner';\n        this.currentIcon = null;\n        this.nextHourIcon = '';\n        this.next12HoursIcon = '';\n        this.lastTimeRefreshed = '';\n        this.loaded = false;\n        this.spinner.show(this.spinnerName);\n        this.weatherSubscription = this.weatherService\n            .getCurrentWeatherInformation()\n            .pipe(filter((res) => Boolean(res)), tap(() => {\n            this.spinner.show(this.spinnerName);\n            this.loaded = false;\n        }), map((res) => res.properties.timeseries[0]), tap(() => this.spinner.hide(this.spinnerName)))\n            .subscribe((timeSeries) => this.setWeatherInformation(timeSeries));\n    }\n    setWeatherInformation(timeSeries) {\n        this.loaded = true;\n        this.currentDegrees = timeSeries.data.instant.details.air_temperature;\n        this.currentIcon = timeSeries.data.next_1_hours.summary.symbol_code;\n        this.nextHourIcon = timeSeries.data.next_1_hours.summary.symbol_code;\n        this.next12HoursIcon = timeSeries.data.next_12_hours.summary.symbol_code;\n        this.lastTimeRefreshed = new Date(timeSeries.time).toLocaleTimeString();\n    }\n    ngOnInit() { }\n    ngOnDestroy() {\n        this.weatherSubscription.unsubscribe();\n    }\n}\nWeatherButtonComponent.ɵfac = function WeatherButtonComponent_Factory(t) { return new (t || WeatherButtonComponent)(i0.ɵɵdirectiveInject(i1$1.NgxSpinnerService), i0.ɵɵdirectiveInject(WeatherService)); };\nWeatherButtonComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: WeatherButtonComponent, selectors: [[\"yah-weather-button\"]], decls: 11, vars: 4, consts: [[1, \"box\"], [\"name\", \"weather-spinner\", \"bdColor\", \"rgba(0,0,0,0)\", \"size\", \"medium\", \"color\", \"#fff\", \"type\", \"square-loader\", 3, \"fullScreen\"], [2, \"color\", \"white\"], [1, \"header\"], [\"src\", \"./assets/clearsky_day.png\"], [\"class\", \"forecast next-hour\", 4, \"ngIf\"], [\"class\", \"forecast upcoming-weather\", 4, \"ngIf\"], [1, \"refreshed\"], [1, \"forecast\", \"next-hour\"], [3, \"src\"], [1, \"forecast\", \"upcoming-weather\"], [1, \"share-row\"], [1, \"ternary-content\"], [1, \"ternary-image\", 3, \"src\"]], template: function WeatherButtonComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"ngx-spinner\", 1);\n        i0.ɵɵelementStart(2, \"p\", 2);\n        i0.ɵɵtext(3, \"Loading...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelement(5, \"img\", 4);\n        i0.ɵɵtext(6, \" Wetter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(7, WeatherButtonComponent_div_7_Template, 6, 2, \"div\", 5);\n        i0.ɵɵtemplate(8, WeatherButtonComponent_div_8_Template, 12, 2, \"div\", 6);\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"fullScreen\", false);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.loaded);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loaded);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" Aktualisiert \", ctx.lastTimeRefreshed, \" \");\n    } }, directives: [i1$1.NgxSpinnerComponent, i3.NgIf], styles: [\"[_nghost-%COMP%]{font-size:1.5rem}.box[_ngcontent-%COMP%]{position:relative;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;min-height:20rem;min-width:20rem;transition:all 50ms ease}.box[_ngcontent-%COMP%]:active{box-shadow:0 .4rem 2rem #0000005e}.box[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]{border-radius:.7rem .7rem 0 0;background:#fff;color:#000;font-size:2rem;display:grid;grid-template-columns:20fr 80fr;padding:.5rem 1rem}.box[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:3rem;height:3rem}.box[_ngcontent-%COMP%]   .forecast[_ngcontent-%COMP%]{padding:1rem 0}.box[_ngcontent-%COMP%]   .forecast.next-hour[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center}.box[_ngcontent-%COMP%]   .forecast.next-hour[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;font-weight:900}.box[_ngcontent-%COMP%]   .forecast.next-hour[_ngcontent-%COMP%] > div[_ngcontent-%COMP%] > img[_ngcontent-%COMP%]{align-items:center;width:7rem;height:7rem}.box[_ngcontent-%COMP%]   .forecast.upcoming-weather[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:center}.box[_ngcontent-%COMP%]   .forecast.upcoming-weather[_ngcontent-%COMP%] > .share-row[_ngcontent-%COMP%]{display:grid;grid-template-columns:50fr 50fr;font-size:1rem}.box[_ngcontent-%COMP%]   .forecast.upcoming-weather[_ngcontent-%COMP%] > .share-row[_ngcontent-%COMP%]   .ternary-content[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center}.box[_ngcontent-%COMP%]   .forecast.upcoming-weather[_ngcontent-%COMP%] > .share-row[_ngcontent-%COMP%]   .ternary-image[_ngcontent-%COMP%]{width:5rem;height:5rem}.refreshed[_ngcontent-%COMP%]{font-size:.8rem;font-weight:200;padding:0 .4rem .4rem 0;display:flex;justify-content:flex-end}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WeatherButtonComponent, [{\n        type: Component,\n        args: [{ selector: 'yah-weather-button', template: \"<div class=\\\"box\\\">\\n  <ngx-spinner\\n    name=\\\"weather-spinner\\\"\\n    bdColor=\\\"rgba(0,0,0,0)\\\"\\n    size=\\\"medium\\\"\\n    color=\\\"#fff\\\"\\n    type=\\\"square-loader\\\"\\n    [fullScreen]=\\\"false\\\"\\n    ><p style=\\\"color: white\\\">Loading...</p></ngx-spinner\\n  >\\n\\n  <div class=\\\"header\\\"><img src=\\\"./assets/clearsky_day.png\\\" /> Wetter</div>\\n\\n  <div class=\\\"forecast next-hour\\\" *ngIf=\\\"loaded\\\">\\n    <div>Jetzt</div>\\n    <div>\\n      <img src=\\\"./assets/{{ currentIcon ? currentIcon : 'cloudy' }}.png\\\" />\\n      {{ currentDegrees }}&#8451;\\n    </div>\\n  </div>\\n\\n  <div class=\\\"forecast upcoming-weather\\\" *ngIf=\\\"loaded\\\">\\n    <div class=\\\"share-row\\\">\\n      <div class=\\\"ternary-content\\\">\\n        <div>N\\u00E4chste Stunde</div>\\n        <div>\\n          <img class=\\\"ternary-image\\\"  src=\\\"./assets/{{ nextHourIcon ? nextHourIcon : 'cloudy' }}.png\\\" />\\n        </div>\\n      </div>\\n      <div class=\\\"ternary-content\\\">\\n        <div>N\\u00E4chste 12 Stunden</div>\\n        <div>\\n          <img class=\\\"ternary-image\\\" src=\\\"./assets/{{ next12HoursIcon ? next12HoursIcon : 'cloudy' }}.png\\\" />\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"refreshed\\\">\\n    Aktualisiert {{lastTimeRefreshed}}\\n  </div>\\n</div>\\n\", styles: [\":host-context{font-size:1.5rem}.box{position:relative;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;min-height:20rem;min-width:20rem;transition:all 50ms ease}.box:active{box-shadow:0 .4rem 2rem #0000005e}.box .header{border-radius:.7rem .7rem 0 0;background:#fff;color:#000;font-size:2rem;display:grid;grid-template-columns:20fr 80fr;padding:.5rem 1rem}.box .header img{width:3rem;height:3rem}.box .forecast{padding:1rem 0}.box .forecast.next-hour{display:flex;flex-direction:column;align-items:center}.box .forecast.next-hour>div{display:flex;flex-direction:row;align-items:center;font-weight:900}.box .forecast.next-hour>div>img{align-items:center;width:7rem;height:7rem}.box .forecast.upcoming-weather{display:flex;flex-direction:row;justify-content:center}.box .forecast.upcoming-weather>.share-row{display:grid;grid-template-columns:50fr 50fr;font-size:1rem}.box .forecast.upcoming-weather>.share-row .ternary-content{display:flex;flex-direction:column;align-items:center}.box .forecast.upcoming-weather>.share-row .ternary-image{width:5rem;height:5rem}.refreshed{font-size:.8rem;font-weight:200;padding:0 .4rem .4rem 0;display:flex;justify-content:flex-end}\\n\"] }]\n    }], function () { return [{ type: i1$1.NgxSpinnerService }, { type: WeatherService }]; }, null); })();\n\nclass WeatherSetupComponent {\n    constructor(weatherService) {\n        this.weatherService = weatherService;\n        this.activated = new FormControl(false);\n        this.longitude = new FormControl('');\n        this.latitude = new FormControl('');\n        this.weatherForm = new FormGroup({\n            activated: this.activated,\n            longitude: this.longitude,\n            latitude: this.latitude,\n        });\n        this.activatedSubscriptions = this.weatherService.activated$.subscribe((isActivated) => {\n            this.weatherForm.get('activated').setValue(isActivated);\n        });\n        this.weatherService.longitude$.subscribe((longitude) => {\n            this.weatherForm.get('longitude').setValue(longitude);\n        });\n        this.weatherService.latitude$.subscribe((latitude) => {\n            this.weatherForm.get('latitude').setValue(latitude);\n        });\n    }\n    ngOnInit() { }\n    setActivated($event) {\n        const checked = $event.target;\n        this.weatherService.setActivated(checked.checked).subscribe();\n    }\n    setLongitude() {\n        const long = this.weatherForm.get('longitude').value;\n        this.weatherService.setLongitude(long).subscribe();\n    }\n    setLatitude() {\n        const lat = this.weatherForm.get('latitude').value;\n        this.weatherService.setLatitude(lat).subscribe();\n    }\n}\nWeatherSetupComponent.ɵfac = function WeatherSetupComponent_Factory(t) { return new (t || WeatherSetupComponent)(i0.ɵɵdirectiveInject(WeatherService)); };\nWeatherSetupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: WeatherSetupComponent, selectors: [[\"yah-weather-setup\"]], decls: 20, vars: 4, consts: [[3, \"formGroup\"], [\"src\", \"assets/clearsky_day.png\", \"width\", \"32\"], [1, \"no-margin\"], [1, \"switch\"], [\"type\", \"checkbox\", 3, \"formControl\", \"change\"], [1, \"slider\"], [1, \"input-row\"], [\"type\", \"text\", 1, \"input-frosted\", 3, \"formControl\", \"input\"], [1, \"symbol\"]], template: function WeatherSetupComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"h2\");\n        i0.ɵɵelement(2, \"img\", 1);\n        i0.ɵɵtext(3, \" Wetter Einstellungen\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"p\", 2);\n        i0.ɵɵtext(5, \"Aktiviert\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"label\", 3);\n        i0.ɵɵelementStart(7, \"input\", 4);\n        i0.ɵɵlistener(\"change\", function WeatherSetupComponent_Template_input_change_7_listener($event) { return ctx.setActivated($event); });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"span\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"p\");\n        i0.ɵɵelementStart(10, \"p\", 2);\n        i0.ɵɵtext(11, \"Longitude\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 6);\n        i0.ɵɵelementStart(13, \"input\", 7);\n        i0.ɵɵlistener(\"input\", function WeatherSetupComponent_Template_input_input_13_listener() { return ctx.setLongitude(); });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"i\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 2);\n        i0.ɵɵtext(16, \"Latitude\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 6);\n        i0.ɵɵelementStart(18, \"input\", 7);\n        i0.ɵɵlistener(\"input\", function WeatherSetupComponent_Template_input_input_18_listener() { return ctx.setLatitude(); });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"i\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.weatherForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formControl\", ctx.activated);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formControl\", ctx.longitude);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.latitude);\n    } }, directives: [i2$1.ɵNgNoValidate, i2$1.NgControlStatusGroup, i2$1.FormGroupDirective, i2$1.CheckboxControlValueAccessor, i2$1.NgControlStatus, i2$1.FormControlDirective, i2$1.DefaultValueAccessor], styles: [\"form[_ngcontent-%COMP%]{display:flex;justify-content:center;flex-direction:column}form[_ngcontent-%COMP%]   .no-margin[_ngcontent-%COMP%]{margin:0}form[_ngcontent-%COMP%]   .input-row[_ngcontent-%COMP%]{display:flex;align-items:center}form[_ngcontent-%COMP%]   .input-row[_ngcontent-%COMP%]   .input-frosted[_ngcontent-%COMP%]{color:#fff;font-size:1.4rem;font-weight:800;padding:1rem;border:none;background:rgba(255,255,255,.4);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;max-width:90%}.switch[_ngcontent-%COMP%]{position:relative;display:inline-block;width:60px;height:34px}.switch[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{opacity:0;width:0;height:0}.slider[_ngcontent-%COMP%]{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;transition:.4s}.slider[_ngcontent-%COMP%]:before{position:absolute;content:\\\"\\\";height:26px;width:26px;left:4px;bottom:4px;background-color:#fff;transition:.4s}input[_ngcontent-%COMP%]:checked + .slider[_ngcontent-%COMP%]{background-color:#2196f3}input[_ngcontent-%COMP%]:focus + .slider[_ngcontent-%COMP%]{box-shadow:0 0 1px #2196f3}input[_ngcontent-%COMP%]:checked + .slider[_ngcontent-%COMP%]:before{transform:translate(26px)}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WeatherSetupComponent, [{\n        type: Component,\n        args: [{ selector: 'yah-weather-setup', template: \"<form [formGroup]=\\\"weatherForm\\\">\\n  <h2><img src=\\\"assets/clearsky_day.png\\\" width=\\\"32\\\" /> Wetter Einstellungen</h2>\\n  <p class=\\\"no-margin\\\">Aktiviert</p>\\n  <label class=\\\"switch\\\">\\n    <input\\n      [formControl]=\\\"activated\\\"\\n      type=\\\"checkbox\\\"\\n      (change)=\\\"setActivated($event)\\\"\\n    />\\n    <span class=\\\"slider\\\"></span>\\n  </label>\\n\\n  <p></p>\\n\\n  <p class=\\\"no-margin\\\">Longitude</p>\\n  <div class=\\\"input-row\\\">\\n    <input\\n      type=\\\"text\\\"\\n      [formControl]=\\\"longitude\\\"\\n      class=\\\"input-frosted\\\"\\n      (input)=\\\"setLongitude()\\\"\\n    />\\n    <i class=\\\"symbol\\\"></i>\\n  </div>\\n\\n  <p class=\\\"no-margin\\\">Latitude</p>\\n  <div class=\\\"input-row\\\">\\n    <input type=\\\"text\\\" [formControl]=\\\"latitude\\\" class=\\\"input-frosted\\\" (input)=\\\"setLatitude()\\\" />\\n    <i class=\\\"symbol\\\"></i>\\n  </div>\\n</form>\\n\\n<!-- <div>Icons made by <a href=\\\"https://www.flaticon.com/authors/pixel-perfect\\\" title=\\\"Pixel perfect\\\">Pixel perfect</a> from <a href=\\\"https://www.flaticon.com/\\\" title=\\\"Flaticon\\\">www.flaticon.com</a></div> -->\\n\", styles: [\"form{display:flex;justify-content:center;flex-direction:column}form .no-margin{margin:0}form .input-row{display:flex;align-items:center}form .input-row .input-frosted{color:#fff;font-size:1.4rem;font-weight:800;padding:1rem;border:none;background:rgba(255,255,255,.4);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;max-width:90%}.switch{position:relative;display:inline-block;width:60px;height:34px}.switch input{opacity:0;width:0;height:0}.slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;transition:.4s}.slider:before{position:absolute;content:\\\"\\\";height:26px;width:26px;left:4px;bottom:4px;background-color:#fff;transition:.4s}input:checked+.slider{background-color:#2196f3}input:focus+.slider{box-shadow:0 0 1px #2196f3}input:checked+.slider:before{transform:translate(26px)}\\n\"] }]\n    }], function () { return [{ type: WeatherService }]; }, null); })();\n\nfunction WeatherDetailsComponent_div_2_div_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵelementStart(2, \"div\", 7);\n    i0.ɵɵelementStart(3, \"h2\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"img\", 8);\n    i0.ɵɵelementStart(6, \"div\", 9);\n    i0.ɵɵelementStart(7, \"h2\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const forecast_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r2.humanReadableTime(forecast_r3.time));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"./assets/\", (forecast_r3.data.next_1_hours == null ? null : forecast_r3.data.next_1_hours.summary.symbol_code) || \"dont_know\", \".png\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", forecast_r3.data.instant.details.air_temperature, \" C\");\n} }\nfunction WeatherDetailsComponent_div_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, WeatherDetailsComponent_div_2_div_1_Template, 9, 3, \"div\", 4);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const forecasts_r1 = ctx.ngIf;\n    i0.ɵɵproperty(\"@fadeIn\", forecasts_r1.properties.timeseries.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", forecasts_r1.properties.timeseries);\n} }\nclass WeatherDetailsComponent {\n    constructor(weatherService) {\n        this.weatherService = weatherService;\n        this.weekdays = ['Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.', 'So.'];\n        this.forecasts$ = weatherService.getCurrentWeatherInformation();\n    }\n    ngOnInit() { }\n    humanReadableTime(time) {\n        const boxedDate = new Date(time);\n        const day = this.weekdays[boxedDate.getDay()] || '';\n        const minutes = boxedDate.getMinutes() < 10\n            ? '0' + boxedDate.getMinutes().toString()\n            : boxedDate.getMinutes().toString();\n        return `${day} ${boxedDate.getHours()}:${minutes}`;\n    }\n}\nWeatherDetailsComponent.ɵfac = function WeatherDetailsComponent_Factory(t) { return new (t || WeatherDetailsComponent)(i0.ɵɵdirectiveInject(WeatherService)); };\nWeatherDetailsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: WeatherDetailsComponent, selectors: [[\"lib-weather-details\"]], decls: 4, vars: 3, consts: [[\"routerLink\", \"/\", 1, \"back-button\"], [\"src\", \"./assets/back.svg\", 1, \"img\"], [\"class\", \"forecast-container\", 4, \"ngIf\"], [1, \"forecast-container\"], [\"class\", \"item\", 4, \"ngFor\", \"ngForOf\"], [1, \"item\"], [1, \"item-card\"], [1, \"day\"], [\"width\", \"200\", \"height\", \"200\", 3, \"src\"], [1, \"temp\"]], template: function WeatherDetailsComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"img\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, WeatherDetailsComponent_div_2_Template, 2, 2, \"div\", 2);\n        i0.ɵɵpipe(3, \"async\");\n    } if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(3, 1, ctx.forecasts$));\n    } }, directives: [i2$2.RouterLink, i3.NgIf, i3.NgForOf], pipes: [i3.AsyncPipe], styles: [\".back-button[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:flex-start;justify-self:center;height:5rem;width:5rem;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;margin-left:1rem;margin-top:2rem}.back-button[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{display:flex;width:2rem;height:2rem;align-self:center}.forecast-container[_ngcontent-%COMP%]{display:flex;flex-direction:row;overflow-x:scroll;width:100%;-ms-overflow-style:none;scrollbar-width:none}.forecast-container[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]   .item-card[_ngcontent-%COMP%]{margin:1rem;padding:1rem;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem}.forecast-container[_ngcontent-%COMP%]::-webkit-scrollbar{display:none}\"], data: { animation: [\n            trigger('fadeIn', [\n                transition('* => *', [\n                    query(':enter', [\n                        style({ opacity: 0, transform: 'translateY(-15px)' }),\n                        stagger('50ms', animate('500ms ease-out', style({ opacity: 1, transform: 'translateY(0px)' }))),\n                    ], { optional: true }),\n                ]),\n            ]),\n        ] } });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WeatherDetailsComponent, [{\n        type: Component,\n        args: [{ selector: 'lib-weather-details', animations: [\n                    trigger('fadeIn', [\n                        transition('* => *', [\n                            query(':enter', [\n                                style({ opacity: 0, transform: 'translateY(-15px)' }),\n                                stagger('50ms', animate('500ms ease-out', style({ opacity: 1, transform: 'translateY(0px)' }))),\n                            ], { optional: true }),\n                        ]),\n                    ]),\n                ], template: \"<div  class=\\\"back-button\\\" routerLink=\\\"/\\\">\\n  <img class=\\\"img\\\" src=\\\"./assets/back.svg\\\">\\n</div>\\n\\n<div class=\\\"forecast-container\\\" *ngIf=\\\"forecasts$ | async as forecasts\\\"  [@fadeIn]=\\\"forecasts.properties.timeseries.length\\\">\\n  <div *ngFor=\\\"let forecast of forecasts.properties.timeseries\\\"  class=\\\"item\\\">\\n    <div class=\\\"item-card\\\">\\n      <div class=\\\"day\\\"><h2>{{this.humanReadableTime(forecast.time)}}</h2></div>\\n      <img src=\\\"./assets/{{ forecast.data.next_1_hours?.summary.symbol_code || 'dont_know' }}.png\\\"  width=\\\"200\\\" height=\\\"200\\\" />\\n      <div class=\\\"temp\\\"><h2>{{forecast.data.instant.details.air_temperature}} C</h2></div>\\n\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".back-button{display:flex;justify-content:center;align-items:flex-start;justify-self:center;height:5rem;width:5rem;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;margin-left:1rem;margin-top:2rem}.back-button img{display:flex;width:2rem;height:2rem;align-self:center}.forecast-container{display:flex;flex-direction:row;overflow-x:scroll;width:100%;-ms-overflow-style:none;scrollbar-width:none}.forecast-container .item .item-card{margin:1rem;padding:1rem;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem}.forecast-container::-webkit-scrollbar{display:none}\\n\"] }]\n    }], function () { return [{ type: WeatherService }]; }, null); })();\n\nclass WeatherModule {\n}\nWeatherModule.ɵfac = function WeatherModule_Factory(t) { return new (t || WeatherModule)(); };\nWeatherModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: WeatherModule });\nWeatherModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            NgxSpinnerModule,\n            ReactiveFormsModule,\n            RouterModule.forChild([\n                { path: 'weather', component: WeatherDetailsComponent }\n            ])\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WeatherModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [WeatherButtonComponent, WeatherSetupComponent, WeatherDetailsComponent],\n                imports: [\n                    CommonModule,\n                    NgxSpinnerModule,\n                    ReactiveFormsModule,\n                    RouterModule.forChild([\n                        { path: 'weather', component: WeatherDetailsComponent }\n                    ])\n                ],\n                exports: [WeatherButtonComponent, WeatherSetupComponent]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(WeatherModule, { declarations: [WeatherButtonComponent, WeatherSetupComponent, WeatherDetailsComponent], imports: [CommonModule,\n        NgxSpinnerModule,\n        ReactiveFormsModule, i2$2.RouterModule], exports: [WeatherButtonComponent, WeatherSetupComponent] }); })();\n\n/*\n * Public API Surface of yah-weather\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { WeatherButtonComponent, WeatherModule, WeatherService, WeatherSetupComponent };\n","map":{"version":3,"file":"yah-weather.mjs","sources":["../../../projects/yah-weather/src/lib/services/weather.service.ts","../../../projects/yah-weather/src/lib/components/weather-button/weather-button.component.html","../../../projects/yah-weather/src/lib/components/weather-button/weather-button.component.ts","../../../projects/yah-weather/src/lib/components/weather-setup/weather-setup.component.ts","../../../projects/yah-weather/src/lib/components/weather-setup/weather-setup.component.html","../../../projects/yah-weather/src/lib/components/weather-details/weather-details.component.html","../../../projects/yah-weather/src/lib/components/weather-details/weather-details.component.ts","../../../projects/yah-weather/src/lib/weather.module.ts","../../../projects/yah-weather/src/public-api.ts","../../../projects/yah-weather/src/yah-weather.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { concat, EMPTY, NEVER, Observable, of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { delay, map, repeat, switchMap, take, timestamp } from 'rxjs/operators';\nimport { YrNoWeatherForecast } from '../types/yr-no-weather-forecast';\nimport { StorageMap } from '@ngx-pwa/local-storage';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WeatherService {\n  public activated$: Observable<boolean>;\n  public longitude$: Observable<string>;\n  public latitude$: Observable<string>;\n\n  private WEATHER_ACTIVATED_KEY = 'WEATHER_ACTIVATED';\n  private WEATHER_LONGITUDE_KEY = 'WEATHER_LONGITUDE';\n  private WEATHER_LATITUDE_KEY = 'WEATHER_LATITUDE';\n\n  constructor(private http: HttpClient, private localDb: StorageMap) {\n    this.activated$ = localDb\n      .watch(this.WEATHER_ACTIVATED_KEY, {\n        type: 'boolean',\n      })\n      .pipe(\n        map((isActivated) => (isActivated === undefined ? false : isActivated))\n      );\n\n    this.longitude$ = localDb.watch(this.WEATHER_LONGITUDE_KEY, {\n      type: 'string',\n    });\n\n    this.latitude$ = localDb.watch(this.WEATHER_LATITUDE_KEY, {\n      type: 'string',\n    });\n  }\n\n  public getCurrentWeatherInformation(): Observable<YrNoWeatherForecast | undefined>  {\n    return this.activated$.pipe(\n      switchMap((isActivated) => {\n        return isActivated\n          ? this.http.get<YrNoWeatherForecast>(\n            'https://api.met.no/weatherapi/locationforecast/2.0/compact?altitude=69&lat=50.8106855&lon=7.1414209'\n          )\n          : of(undefined);\n      }),\n      timestamp(),\n      switchMap(({timestamp: ts, value: value}) => concat(of(value), EMPTY.pipe(delay(this.timeToNextHourInMs(ts))))\n      ),\n      repeat()\n    );\n  }\n\n  private timeToNextHourInMs(currentTimestampMs: number): number {\n    const timestampSeconds = currentTimestampMs / 1000;\n    const numberOfSecondsIntoTheCurrentHour = timestampSeconds % 3600;\n    const numberOfSecondsToTheNextHour =\n      3600 - numberOfSecondsIntoTheCurrentHour;\n    return numberOfSecondsToTheNextHour * 1000;\n  }\n\n  setActivated(checked: boolean): Observable<null> {\n    return this.localDb.set(this.WEATHER_ACTIVATED_KEY, checked, {\n      type: 'boolean',\n    });\n  }\n\n  setLatitude(lat: string): Observable<null> {\n    return this.localDb.set(this.WEATHER_LATITUDE_KEY, lat, {\n      type: 'string',\n    });\n  }\n\n  setLongitude(long: string): Observable<null> {\n    return this.localDb.set(this.WEATHER_LONGITUDE_KEY, long, {\n      type: 'string',\n    });\n  }\n}\n","<div class=\"box\">\n  <ngx-spinner\n    name=\"weather-spinner\"\n    bdColor=\"rgba(0,0,0,0)\"\n    size=\"medium\"\n    color=\"#fff\"\n    type=\"square-loader\"\n    [fullScreen]=\"false\"\n    ><p style=\"color: white\">Loading...</p></ngx-spinner\n  >\n\n  <div class=\"header\"><img src=\"./assets/clearsky_day.png\" /> Wetter</div>\n\n  <div class=\"forecast next-hour\" *ngIf=\"loaded\">\n    <div>Jetzt</div>\n    <div>\n      <img src=\"./assets/{{ currentIcon ? currentIcon : 'cloudy' }}.png\" />\n      {{ currentDegrees }}&#8451;\n    </div>\n  </div>\n\n  <div class=\"forecast upcoming-weather\" *ngIf=\"loaded\">\n    <div class=\"share-row\">\n      <div class=\"ternary-content\">\n        <div>Nächste Stunde</div>\n        <div>\n          <img class=\"ternary-image\"  src=\"./assets/{{ nextHourIcon ? nextHourIcon : 'cloudy' }}.png\" />\n        </div>\n      </div>\n      <div class=\"ternary-content\">\n        <div>Nächste 12 Stunden</div>\n        <div>\n          <img class=\"ternary-image\" src=\"./assets/{{ next12HoursIcon ? next12HoursIcon : 'cloudy' }}.png\" />\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"refreshed\">\n    Aktualisiert {{lastTimeRefreshed}}\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { WeatherService } from '../../services/weather.service';\nimport { TimeSeries } from '../../types/yr-no-weather-forecast';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'yah-weather-button',\n  templateUrl: './weather-button.component.html',\n  styleUrls: ['./weather-button.component.scss'],\n})\nexport class WeatherButtonComponent implements OnInit, OnDestroy {\n  spinnerName = 'weather-spinner';\n  currentDegrees;\n  currentIcon = null;\n  nextHourIcon = '';\n  next12HoursIcon = '';\n  lastTimeRefreshed = '';\n  private weatherSubscription: Subscription;\n  loaded = false;\n\n  constructor(\n    private spinner: NgxSpinnerService,\n    private weatherService: WeatherService\n  ) {\n    this.spinner.show(this.spinnerName);\n\n    this.weatherSubscription = this.weatherService\n      .getCurrentWeatherInformation()\n      .pipe(\n        filter((res) => Boolean(res)),\n        tap(() => {\n          this.spinner.show(this.spinnerName);\n          this.loaded = false;\n        }),\n        map((res) => res.properties.timeseries[0]),\n        tap(() => this.spinner.hide(this.spinnerName))\n      )\n      .subscribe((timeSeries) => this.setWeatherInformation(timeSeries));\n  }\n\n  private setWeatherInformation(timeSeries: TimeSeries): void {\n    this.loaded = true;\n    this.currentDegrees = timeSeries.data.instant.details.air_temperature;\n    this.currentIcon = timeSeries.data.next_1_hours.summary.symbol_code;\n\n    this.nextHourIcon = timeSeries.data.next_1_hours.summary.symbol_code;\n    this.next12HoursIcon = timeSeries.data.next_12_hours.summary.symbol_code;\n\n    this.lastTimeRefreshed = new Date(timeSeries.time).toLocaleTimeString();\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this.weatherSubscription.unsubscribe();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { WeatherService } from '../../services/weather.service';\nimport { take } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'yah-weather-setup',\n  templateUrl: './weather-setup.component.html',\n  styleUrls: ['./weather-setup.component.scss'],\n})\nexport class WeatherSetupComponent implements OnInit {\n  weatherForm: FormGroup;\n  activated = new FormControl(false);\n  longitude = new FormControl('');\n  latitude = new FormControl('');\n\n  private activatedSubscriptions: Subscription;\n\n  constructor(private weatherService: WeatherService) {\n    this.weatherForm = new FormGroup({\n      activated: this.activated,\n      longitude: this.longitude,\n      latitude: this.latitude,\n    });\n\n    this.activatedSubscriptions = this.weatherService.activated$.subscribe(\n      (isActivated) => {\n        this.weatherForm.get('activated').setValue(isActivated);\n      }\n    );\n\n    this.weatherService.longitude$.subscribe((longitude) => {\n      this.weatherForm.get('longitude').setValue(longitude);\n    });\n\n    this.weatherService.latitude$.subscribe((latitude) => {\n      this.weatherForm.get('latitude').setValue(latitude);\n    });\n  }\n\n  ngOnInit(): void {}\n\n  public setActivated($event: Event): void {\n    const checked = $event.target as HTMLInputElement;\n    this.weatherService.setActivated(checked.checked).subscribe();\n  }\n\n  public setLongitude(): void {\n    const long = this.weatherForm.get('longitude').value;\n    this.weatherService.setLongitude(long).subscribe();\n  }\n\n  public setLatitude(): void {\n    const lat = this.weatherForm.get('latitude').value;\n    this.weatherService.setLatitude(lat).subscribe();\n  }\n}\n","<form [formGroup]=\"weatherForm\">\n  <h2><img src=\"assets/clearsky_day.png\" width=\"32\" /> Wetter Einstellungen</h2>\n  <p class=\"no-margin\">Aktiviert</p>\n  <label class=\"switch\">\n    <input\n      [formControl]=\"activated\"\n      type=\"checkbox\"\n      (change)=\"setActivated($event)\"\n    />\n    <span class=\"slider\"></span>\n  </label>\n\n  <p></p>\n\n  <p class=\"no-margin\">Longitude</p>\n  <div class=\"input-row\">\n    <input\n      type=\"text\"\n      [formControl]=\"longitude\"\n      class=\"input-frosted\"\n      (input)=\"setLongitude()\"\n    />\n    <i class=\"symbol\"></i>\n  </div>\n\n  <p class=\"no-margin\">Latitude</p>\n  <div class=\"input-row\">\n    <input type=\"text\" [formControl]=\"latitude\" class=\"input-frosted\" (input)=\"setLatitude()\" />\n    <i class=\"symbol\"></i>\n  </div>\n</form>\n\n<!-- <div>Icons made by <a href=\"https://www.flaticon.com/authors/pixel-perfect\" title=\"Pixel perfect\">Pixel perfect</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div> -->\n","<div  class=\"back-button\" routerLink=\"/\">\n  <img class=\"img\" src=\"./assets/back.svg\">\n</div>\n\n<div class=\"forecast-container\" *ngIf=\"forecasts$ | async as forecasts\"  [@fadeIn]=\"forecasts.properties.timeseries.length\">\n  <div *ngFor=\"let forecast of forecasts.properties.timeseries\"  class=\"item\">\n    <div class=\"item-card\">\n      <div class=\"day\"><h2>{{this.humanReadableTime(forecast.time)}}</h2></div>\n      <img src=\"./assets/{{ forecast.data.next_1_hours?.summary.symbol_code || 'dont_know' }}.png\"  width=\"200\" height=\"200\" />\n      <div class=\"temp\"><h2>{{forecast.data.instant.details.air_temperature}} C</h2></div>\n\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { WeatherService } from '../../services/weather.service';\nimport {\n  TimeSeries,\n  YrNoWeatherForecast,\n} from '../../types/yr-no-weather-forecast';\nimport { Observable } from 'rxjs';\nimport {animate, query, stagger, style, transition, trigger} from \"@angular/animations\";\n\n@Component({\n  selector: 'lib-weather-details',\n  templateUrl: './weather-details.component.html',\n  styleUrls: ['./weather-details.component.scss'],\n  animations: [\n    trigger('fadeIn', [\n      transition('* => *', [\n        query(\n          ':enter',\n          [\n            style({ opacity: 0, transform: 'translateY(-15px)' }),\n            stagger(\n              '50ms',\n              animate(\n                '500ms ease-out',\n                style({ opacity: 1, transform: 'translateY(0px)' })\n              )\n            ),\n          ],\n          { optional: true }\n        ),\n      ]),\n    ]),\n  ]\n})\nexport class WeatherDetailsComponent implements OnInit {\n  forecasts$: Observable<YrNoWeatherForecast>;\n\n  private weekdays = ['Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.', 'So.'];\n\n  constructor(private readonly weatherService: WeatherService) {\n    this.forecasts$ = weatherService.getCurrentWeatherInformation();\n  }\n\n  ngOnInit(): void {}\n\n  public humanReadableTime(time: Date): string {\n    const boxedDate = new Date(time);\n\n    const day = this.weekdays[boxedDate.getDay()] || '';\n    const minutes =\n      boxedDate.getMinutes() < 10\n        ? '0' + boxedDate.getMinutes().toString()\n        : boxedDate.getMinutes().toString();\n\n    return `${day} ${boxedDate.getHours()}:${minutes}`;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {WeatherButtonComponent} from './components/weather-button/weather-button.component';\nimport {WeatherSetupComponent} from './components/weather-setup/weather-setup.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {NgxSpinnerModule} from 'ngx-spinner';\nimport {RouterModule} from '@angular/router';\nimport { WeatherDetailsComponent } from './components/weather-details/weather-details.component';\n\n\n@NgModule({\n  declarations: [WeatherButtonComponent, WeatherSetupComponent, WeatherDetailsComponent],\n  imports: [\n    CommonModule,\n    NgxSpinnerModule,\n    ReactiveFormsModule,\n    RouterModule.forChild([\n      { path: 'weather', component: WeatherDetailsComponent }\n    ])\n  ],\n  exports: [WeatherButtonComponent, WeatherSetupComponent]\n})\nexport class WeatherModule { }\n","/*\n * Public API Surface of yah-weather\n */\nexport * from './lib/components/weather-button/weather-button.component';\nexport * from './lib/components/weather-setup/weather-setup.component';\nexport * from './lib/services/weather.service';\nexport * from './lib/types/yr-no-weather-forecast';\nexport * from './lib/weather.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { map, switchMap, timestamp, delay, repeat, filter, tap } from 'rxjs/operators';\nimport * as i1$1 from 'ngx-spinner';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { of, concat, EMPTY } from 'rxjs';\nimport * as i1 from '@angular/common/http';\nimport * as i2 from '@ngx-pwa/local-storage';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2$1 from '@angular/forms';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport * as i2$2 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport { trigger, transition, query, style, stagger, animate } from '@angular/animations';\n\nclass WeatherService {\n    constructor(http, localDb) {\n        this.http = http;\n        this.localDb = localDb;\n        this.WEATHER_ACTIVATED_KEY = 'WEATHER_ACTIVATED';\n        this.WEATHER_LONGITUDE_KEY = 'WEATHER_LONGITUDE';\n        this.WEATHER_LATITUDE_KEY = 'WEATHER_LATITUDE';\n        this.activated$ = localDb\n            .watch(this.WEATHER_ACTIVATED_KEY, {\n            type: 'boolean',\n        })\n            .pipe(map((isActivated) => (isActivated === undefined ? false : isActivated)));\n        this.longitude$ = localDb.watch(this.WEATHER_LONGITUDE_KEY, {\n            type: 'string',\n        });\n        this.latitude$ = localDb.watch(this.WEATHER_LATITUDE_KEY, {\n            type: 'string',\n        });\n    }\n    getCurrentWeatherInformation() {\n        return this.activated$.pipe(switchMap((isActivated) => {\n            return isActivated\n                ? this.http.get('https://api.met.no/weatherapi/locationforecast/2.0/compact?altitude=69&lat=50.8106855&lon=7.1414209')\n                : of(undefined);\n        }), timestamp(), switchMap(({ timestamp: ts, value: value }) => concat(of(value), EMPTY.pipe(delay(this.timeToNextHourInMs(ts))))), repeat());\n    }\n    timeToNextHourInMs(currentTimestampMs) {\n        const timestampSeconds = currentTimestampMs / 1000;\n        const numberOfSecondsIntoTheCurrentHour = timestampSeconds % 3600;\n        const numberOfSecondsToTheNextHour = 3600 - numberOfSecondsIntoTheCurrentHour;\n        return numberOfSecondsToTheNextHour * 1000;\n    }\n    setActivated(checked) {\n        return this.localDb.set(this.WEATHER_ACTIVATED_KEY, checked, {\n            type: 'boolean',\n        });\n    }\n    setLatitude(lat) {\n        return this.localDb.set(this.WEATHER_LATITUDE_KEY, lat, {\n            type: 'string',\n        });\n    }\n    setLongitude(long) {\n        return this.localDb.set(this.WEATHER_LONGITUDE_KEY, long, {\n            type: 'string',\n        });\n    }\n}\nWeatherService.ɵfac = function WeatherService_Factory(t) { return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageMap)); };\nWeatherService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: WeatherService, factory: WeatherService.ɵfac, providedIn: 'root' });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WeatherService, [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], function () { return [{ type: i1.HttpClient }, { type: i2.StorageMap }]; }, null);\n})();\n\nfunction WeatherButtonComponent_div_7_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 8);\n        i0.ɵɵelementStart(1, \"div\");\n        i0.ɵɵtext(2, \"Jetzt\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\");\n        i0.ɵɵelement(4, \"img\", 9);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r0 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(4);\n        i0.ɵɵpropertyInterpolate1(\"src\", \"./assets/\", ctx_r0.currentIcon ? ctx_r0.currentIcon : \"cloudy\", \".png\", i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx_r0.currentDegrees, \"\\u2103 \");\n    }\n}\nfunction WeatherButtonComponent_div_8_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 10);\n        i0.ɵɵelementStart(1, \"div\", 11);\n        i0.ɵɵelementStart(2, \"div\", 12);\n        i0.ɵɵelementStart(3, \"div\");\n        i0.ɵɵtext(4, \"N\\u00E4chste Stunde\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\");\n        i0.ɵɵelement(6, \"img\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 12);\n        i0.ɵɵelementStart(8, \"div\");\n        i0.ɵɵtext(9, \"N\\u00E4chste 12 Stunden\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\");\n        i0.ɵɵelement(11, \"img\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r1 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(6);\n        i0.ɵɵpropertyInterpolate1(\"src\", \"./assets/\", ctx_r1.nextHourIcon ? ctx_r1.nextHourIcon : \"cloudy\", \".png\", i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(5);\n        i0.ɵɵpropertyInterpolate1(\"src\", \"./assets/\", ctx_r1.next12HoursIcon ? ctx_r1.next12HoursIcon : \"cloudy\", \".png\", i0.ɵɵsanitizeUrl);\n    }\n}\nclass WeatherButtonComponent {\n    constructor(spinner, weatherService) {\n        this.spinner = spinner;\n        this.weatherService = weatherService;\n        this.spinnerName = 'weather-spinner';\n        this.currentIcon = null;\n        this.nextHourIcon = '';\n        this.next12HoursIcon = '';\n        this.lastTimeRefreshed = '';\n        this.loaded = false;\n        this.spinner.show(this.spinnerName);\n        this.weatherSubscription = this.weatherService\n            .getCurrentWeatherInformation()\n            .pipe(filter((res) => Boolean(res)), tap(() => {\n            this.spinner.show(this.spinnerName);\n            this.loaded = false;\n        }), map((res) => res.properties.timeseries[0]), tap(() => this.spinner.hide(this.spinnerName)))\n            .subscribe((timeSeries) => this.setWeatherInformation(timeSeries));\n    }\n    setWeatherInformation(timeSeries) {\n        this.loaded = true;\n        this.currentDegrees = timeSeries.data.instant.details.air_temperature;\n        this.currentIcon = timeSeries.data.next_1_hours.summary.symbol_code;\n        this.nextHourIcon = timeSeries.data.next_1_hours.summary.symbol_code;\n        this.next12HoursIcon = timeSeries.data.next_12_hours.summary.symbol_code;\n        this.lastTimeRefreshed = new Date(timeSeries.time).toLocaleTimeString();\n    }\n    ngOnInit() { }\n    ngOnDestroy() {\n        this.weatherSubscription.unsubscribe();\n    }\n}\nWeatherButtonComponent.ɵfac = function WeatherButtonComponent_Factory(t) { return new (t || WeatherButtonComponent)(i0.ɵɵdirectiveInject(i1$1.NgxSpinnerService), i0.ɵɵdirectiveInject(WeatherService)); };\nWeatherButtonComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: WeatherButtonComponent, selectors: [[\"yah-weather-button\"]], decls: 11, vars: 4, consts: [[1, \"box\"], [\"name\", \"weather-spinner\", \"bdColor\", \"rgba(0,0,0,0)\", \"size\", \"medium\", \"color\", \"#fff\", \"type\", \"square-loader\", 3, \"fullScreen\"], [2, \"color\", \"white\"], [1, \"header\"], [\"src\", \"./assets/clearsky_day.png\"], [\"class\", \"forecast next-hour\", 4, \"ngIf\"], [\"class\", \"forecast upcoming-weather\", 4, \"ngIf\"], [1, \"refreshed\"], [1, \"forecast\", \"next-hour\"], [3, \"src\"], [1, \"forecast\", \"upcoming-weather\"], [1, \"share-row\"], [1, \"ternary-content\"], [1, \"ternary-image\", 3, \"src\"]], template: function WeatherButtonComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵelementStart(1, \"ngx-spinner\", 1);\n            i0.ɵɵelementStart(2, \"p\", 2);\n            i0.ɵɵtext(3, \"Loading...\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"div\", 3);\n            i0.ɵɵelement(5, \"img\", 4);\n            i0.ɵɵtext(6, \" Wetter\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(7, WeatherButtonComponent_div_7_Template, 6, 2, \"div\", 5);\n            i0.ɵɵtemplate(8, WeatherButtonComponent_div_8_Template, 12, 2, \"div\", 6);\n            i0.ɵɵelementStart(9, \"div\", 7);\n            i0.ɵɵtext(10);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"fullScreen\", false);\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"ngIf\", ctx.loaded);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.loaded);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate1(\" Aktualisiert \", ctx.lastTimeRefreshed, \" \");\n        }\n    }, directives: [i1$1.NgxSpinnerComponent, i3.NgIf], styles: [\"[_nghost-%COMP%]{font-size:1.5rem}.box[_ngcontent-%COMP%]{position:relative;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;min-height:20rem;min-width:20rem;transition:all 50ms ease}.box[_ngcontent-%COMP%]:active{box-shadow:0 .4rem 2rem #0000005e}.box[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]{border-radius:.7rem .7rem 0 0;background:#fff;color:#000;font-size:2rem;display:grid;grid-template-columns:20fr 80fr;padding:.5rem 1rem}.box[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:3rem;height:3rem}.box[_ngcontent-%COMP%]   .forecast[_ngcontent-%COMP%]{padding:1rem 0}.box[_ngcontent-%COMP%]   .forecast.next-hour[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center}.box[_ngcontent-%COMP%]   .forecast.next-hour[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;font-weight:900}.box[_ngcontent-%COMP%]   .forecast.next-hour[_ngcontent-%COMP%] > div[_ngcontent-%COMP%] > img[_ngcontent-%COMP%]{align-items:center;width:7rem;height:7rem}.box[_ngcontent-%COMP%]   .forecast.upcoming-weather[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:center}.box[_ngcontent-%COMP%]   .forecast.upcoming-weather[_ngcontent-%COMP%] > .share-row[_ngcontent-%COMP%]{display:grid;grid-template-columns:50fr 50fr;font-size:1rem}.box[_ngcontent-%COMP%]   .forecast.upcoming-weather[_ngcontent-%COMP%] > .share-row[_ngcontent-%COMP%]   .ternary-content[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center}.box[_ngcontent-%COMP%]   .forecast.upcoming-weather[_ngcontent-%COMP%] > .share-row[_ngcontent-%COMP%]   .ternary-image[_ngcontent-%COMP%]{width:5rem;height:5rem}.refreshed[_ngcontent-%COMP%]{font-size:.8rem;font-weight:200;padding:0 .4rem .4rem 0;display:flex;justify-content:flex-end}\"] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WeatherButtonComponent, [{\n            type: Component,\n            args: [{ selector: 'yah-weather-button', template: \"<div class=\\\"box\\\">\\n  <ngx-spinner\\n    name=\\\"weather-spinner\\\"\\n    bdColor=\\\"rgba(0,0,0,0)\\\"\\n    size=\\\"medium\\\"\\n    color=\\\"#fff\\\"\\n    type=\\\"square-loader\\\"\\n    [fullScreen]=\\\"false\\\"\\n    ><p style=\\\"color: white\\\">Loading...</p></ngx-spinner\\n  >\\n\\n  <div class=\\\"header\\\"><img src=\\\"./assets/clearsky_day.png\\\" /> Wetter</div>\\n\\n  <div class=\\\"forecast next-hour\\\" *ngIf=\\\"loaded\\\">\\n    <div>Jetzt</div>\\n    <div>\\n      <img src=\\\"./assets/{{ currentIcon ? currentIcon : 'cloudy' }}.png\\\" />\\n      {{ currentDegrees }}&#8451;\\n    </div>\\n  </div>\\n\\n  <div class=\\\"forecast upcoming-weather\\\" *ngIf=\\\"loaded\\\">\\n    <div class=\\\"share-row\\\">\\n      <div class=\\\"ternary-content\\\">\\n        <div>N\\u00E4chste Stunde</div>\\n        <div>\\n          <img class=\\\"ternary-image\\\"  src=\\\"./assets/{{ nextHourIcon ? nextHourIcon : 'cloudy' }}.png\\\" />\\n        </div>\\n      </div>\\n      <div class=\\\"ternary-content\\\">\\n        <div>N\\u00E4chste 12 Stunden</div>\\n        <div>\\n          <img class=\\\"ternary-image\\\" src=\\\"./assets/{{ next12HoursIcon ? next12HoursIcon : 'cloudy' }}.png\\\" />\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"refreshed\\\">\\n    Aktualisiert {{lastTimeRefreshed}}\\n  </div>\\n</div>\\n\", styles: [\":host-context{font-size:1.5rem}.box{position:relative;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;min-height:20rem;min-width:20rem;transition:all 50ms ease}.box:active{box-shadow:0 .4rem 2rem #0000005e}.box .header{border-radius:.7rem .7rem 0 0;background:#fff;color:#000;font-size:2rem;display:grid;grid-template-columns:20fr 80fr;padding:.5rem 1rem}.box .header img{width:3rem;height:3rem}.box .forecast{padding:1rem 0}.box .forecast.next-hour{display:flex;flex-direction:column;align-items:center}.box .forecast.next-hour>div{display:flex;flex-direction:row;align-items:center;font-weight:900}.box .forecast.next-hour>div>img{align-items:center;width:7rem;height:7rem}.box .forecast.upcoming-weather{display:flex;flex-direction:row;justify-content:center}.box .forecast.upcoming-weather>.share-row{display:grid;grid-template-columns:50fr 50fr;font-size:1rem}.box .forecast.upcoming-weather>.share-row .ternary-content{display:flex;flex-direction:column;align-items:center}.box .forecast.upcoming-weather>.share-row .ternary-image{width:5rem;height:5rem}.refreshed{font-size:.8rem;font-weight:200;padding:0 .4rem .4rem 0;display:flex;justify-content:flex-end}\\n\"] }]\n        }], function () { return [{ type: i1$1.NgxSpinnerService }, { type: WeatherService }]; }, null);\n})();\n\nclass WeatherSetupComponent {\n    constructor(weatherService) {\n        this.weatherService = weatherService;\n        this.activated = new FormControl(false);\n        this.longitude = new FormControl('');\n        this.latitude = new FormControl('');\n        this.weatherForm = new FormGroup({\n            activated: this.activated,\n            longitude: this.longitude,\n            latitude: this.latitude,\n        });\n        this.activatedSubscriptions = this.weatherService.activated$.subscribe((isActivated) => {\n            this.weatherForm.get('activated').setValue(isActivated);\n        });\n        this.weatherService.longitude$.subscribe((longitude) => {\n            this.weatherForm.get('longitude').setValue(longitude);\n        });\n        this.weatherService.latitude$.subscribe((latitude) => {\n            this.weatherForm.get('latitude').setValue(latitude);\n        });\n    }\n    ngOnInit() { }\n    setActivated($event) {\n        const checked = $event.target;\n        this.weatherService.setActivated(checked.checked).subscribe();\n    }\n    setLongitude() {\n        const long = this.weatherForm.get('longitude').value;\n        this.weatherService.setLongitude(long).subscribe();\n    }\n    setLatitude() {\n        const lat = this.weatherForm.get('latitude').value;\n        this.weatherService.setLatitude(lat).subscribe();\n    }\n}\nWeatherSetupComponent.ɵfac = function WeatherSetupComponent_Factory(t) { return new (t || WeatherSetupComponent)(i0.ɵɵdirectiveInject(WeatherService)); };\nWeatherSetupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: WeatherSetupComponent, selectors: [[\"yah-weather-setup\"]], decls: 20, vars: 4, consts: [[3, \"formGroup\"], [\"src\", \"assets/clearsky_day.png\", \"width\", \"32\"], [1, \"no-margin\"], [1, \"switch\"], [\"type\", \"checkbox\", 3, \"formControl\", \"change\"], [1, \"slider\"], [1, \"input-row\"], [\"type\", \"text\", 1, \"input-frosted\", 3, \"formControl\", \"input\"], [1, \"symbol\"]], template: function WeatherSetupComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"form\", 0);\n            i0.ɵɵelementStart(1, \"h2\");\n            i0.ɵɵelement(2, \"img\", 1);\n            i0.ɵɵtext(3, \" Wetter Einstellungen\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"p\", 2);\n            i0.ɵɵtext(5, \"Aktiviert\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"label\", 3);\n            i0.ɵɵelementStart(7, \"input\", 4);\n            i0.ɵɵlistener(\"change\", function WeatherSetupComponent_Template_input_change_7_listener($event) { return ctx.setActivated($event); });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(8, \"span\", 5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(9, \"p\");\n            i0.ɵɵelementStart(10, \"p\", 2);\n            i0.ɵɵtext(11, \"Longitude\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(12, \"div\", 6);\n            i0.ɵɵelementStart(13, \"input\", 7);\n            i0.ɵɵlistener(\"input\", function WeatherSetupComponent_Template_input_input_13_listener() { return ctx.setLongitude(); });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(14, \"i\", 8);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(15, \"p\", 2);\n            i0.ɵɵtext(16, \"Latitude\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(17, \"div\", 6);\n            i0.ɵɵelementStart(18, \"input\", 7);\n            i0.ɵɵlistener(\"input\", function WeatherSetupComponent_Template_input_input_18_listener() { return ctx.setLatitude(); });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(19, \"i\", 8);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵproperty(\"formGroup\", ctx.weatherForm);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"formControl\", ctx.activated);\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"formControl\", ctx.longitude);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"formControl\", ctx.latitude);\n        }\n    }, directives: [i2$1.ɵNgNoValidate, i2$1.NgControlStatusGroup, i2$1.FormGroupDirective, i2$1.CheckboxControlValueAccessor, i2$1.NgControlStatus, i2$1.FormControlDirective, i2$1.DefaultValueAccessor], styles: [\"form[_ngcontent-%COMP%]{display:flex;justify-content:center;flex-direction:column}form[_ngcontent-%COMP%]   .no-margin[_ngcontent-%COMP%]{margin:0}form[_ngcontent-%COMP%]   .input-row[_ngcontent-%COMP%]{display:flex;align-items:center}form[_ngcontent-%COMP%]   .input-row[_ngcontent-%COMP%]   .input-frosted[_ngcontent-%COMP%]{color:#fff;font-size:1.4rem;font-weight:800;padding:1rem;border:none;background:rgba(255,255,255,.4);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;max-width:90%}.switch[_ngcontent-%COMP%]{position:relative;display:inline-block;width:60px;height:34px}.switch[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{opacity:0;width:0;height:0}.slider[_ngcontent-%COMP%]{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;transition:.4s}.slider[_ngcontent-%COMP%]:before{position:absolute;content:\\\"\\\";height:26px;width:26px;left:4px;bottom:4px;background-color:#fff;transition:.4s}input[_ngcontent-%COMP%]:checked + .slider[_ngcontent-%COMP%]{background-color:#2196f3}input[_ngcontent-%COMP%]:focus + .slider[_ngcontent-%COMP%]{box-shadow:0 0 1px #2196f3}input[_ngcontent-%COMP%]:checked + .slider[_ngcontent-%COMP%]:before{transform:translate(26px)}\"] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WeatherSetupComponent, [{\n            type: Component,\n            args: [{ selector: 'yah-weather-setup', template: \"<form [formGroup]=\\\"weatherForm\\\">\\n  <h2><img src=\\\"assets/clearsky_day.png\\\" width=\\\"32\\\" /> Wetter Einstellungen</h2>\\n  <p class=\\\"no-margin\\\">Aktiviert</p>\\n  <label class=\\\"switch\\\">\\n    <input\\n      [formControl]=\\\"activated\\\"\\n      type=\\\"checkbox\\\"\\n      (change)=\\\"setActivated($event)\\\"\\n    />\\n    <span class=\\\"slider\\\"></span>\\n  </label>\\n\\n  <p></p>\\n\\n  <p class=\\\"no-margin\\\">Longitude</p>\\n  <div class=\\\"input-row\\\">\\n    <input\\n      type=\\\"text\\\"\\n      [formControl]=\\\"longitude\\\"\\n      class=\\\"input-frosted\\\"\\n      (input)=\\\"setLongitude()\\\"\\n    />\\n    <i class=\\\"symbol\\\"></i>\\n  </div>\\n\\n  <p class=\\\"no-margin\\\">Latitude</p>\\n  <div class=\\\"input-row\\\">\\n    <input type=\\\"text\\\" [formControl]=\\\"latitude\\\" class=\\\"input-frosted\\\" (input)=\\\"setLatitude()\\\" />\\n    <i class=\\\"symbol\\\"></i>\\n  </div>\\n</form>\\n\\n<!-- <div>Icons made by <a href=\\\"https://www.flaticon.com/authors/pixel-perfect\\\" title=\\\"Pixel perfect\\\">Pixel perfect</a> from <a href=\\\"https://www.flaticon.com/\\\" title=\\\"Flaticon\\\">www.flaticon.com</a></div> -->\\n\", styles: [\"form{display:flex;justify-content:center;flex-direction:column}form .no-margin{margin:0}form .input-row{display:flex;align-items:center}form .input-row .input-frosted{color:#fff;font-size:1.4rem;font-weight:800;padding:1rem;border:none;background:rgba(255,255,255,.4);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;max-width:90%}.switch{position:relative;display:inline-block;width:60px;height:34px}.switch input{opacity:0;width:0;height:0}.slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;transition:.4s}.slider:before{position:absolute;content:\\\"\\\";height:26px;width:26px;left:4px;bottom:4px;background-color:#fff;transition:.4s}input:checked+.slider{background-color:#2196f3}input:focus+.slider{box-shadow:0 0 1px #2196f3}input:checked+.slider:before{transform:translate(26px)}\\n\"] }]\n        }], function () { return [{ type: WeatherService }]; }, null);\n})();\n\nfunction WeatherDetailsComponent_div_2_div_1_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 5);\n        i0.ɵɵelementStart(1, \"div\", 6);\n        i0.ɵɵelementStart(2, \"div\", 7);\n        i0.ɵɵelementStart(3, \"h2\");\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"img\", 8);\n        i0.ɵɵelementStart(6, \"div\", 9);\n        i0.ɵɵelementStart(7, \"h2\");\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const forecast_r3 = ctx.$implicit;\n        const ctx_r2 = i0.ɵɵnextContext(2);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx_r2.humanReadableTime(forecast_r3.time));\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate1(\"src\", \"./assets/\", (forecast_r3.data.next_1_hours == null ? null : forecast_r3.data.next_1_hours.summary.symbol_code) || \"dont_know\", \".png\", i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", forecast_r3.data.instant.details.air_temperature, \" C\");\n    }\n}\nfunction WeatherDetailsComponent_div_2_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 3);\n        i0.ɵɵtemplate(1, WeatherDetailsComponent_div_2_div_1_Template, 9, 3, \"div\", 4);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const forecasts_r1 = ctx.ngIf;\n        i0.ɵɵproperty(\"@fadeIn\", forecasts_r1.properties.timeseries.length);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", forecasts_r1.properties.timeseries);\n    }\n}\nclass WeatherDetailsComponent {\n    constructor(weatherService) {\n        this.weatherService = weatherService;\n        this.weekdays = ['Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.', 'So.'];\n        this.forecasts$ = weatherService.getCurrentWeatherInformation();\n    }\n    ngOnInit() { }\n    humanReadableTime(time) {\n        const boxedDate = new Date(time);\n        const day = this.weekdays[boxedDate.getDay()] || '';\n        const minutes = boxedDate.getMinutes() < 10\n            ? '0' + boxedDate.getMinutes().toString()\n            : boxedDate.getMinutes().toString();\n        return `${day} ${boxedDate.getHours()}:${minutes}`;\n    }\n}\nWeatherDetailsComponent.ɵfac = function WeatherDetailsComponent_Factory(t) { return new (t || WeatherDetailsComponent)(i0.ɵɵdirectiveInject(WeatherService)); };\nWeatherDetailsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: WeatherDetailsComponent, selectors: [[\"lib-weather-details\"]], decls: 4, vars: 3, consts: [[\"routerLink\", \"/\", 1, \"back-button\"], [\"src\", \"./assets/back.svg\", 1, \"img\"], [\"class\", \"forecast-container\", 4, \"ngIf\"], [1, \"forecast-container\"], [\"class\", \"item\", 4, \"ngFor\", \"ngForOf\"], [1, \"item\"], [1, \"item-card\"], [1, \"day\"], [\"width\", \"200\", \"height\", \"200\", 3, \"src\"], [1, \"temp\"]], template: function WeatherDetailsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵelement(1, \"img\", 1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(2, WeatherDetailsComponent_div_2_Template, 2, 2, \"div\", 2);\n            i0.ɵɵpipe(3, \"async\");\n        }\n        if (rf & 2) {\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(3, 1, ctx.forecasts$));\n        }\n    }, directives: [i2$2.RouterLink, i3.NgIf, i3.NgForOf], pipes: [i3.AsyncPipe], styles: [\".back-button[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:flex-start;justify-self:center;height:5rem;width:5rem;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;margin-left:1rem;margin-top:2rem}.back-button[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{display:flex;width:2rem;height:2rem;align-self:center}.forecast-container[_ngcontent-%COMP%]{display:flex;flex-direction:row;overflow-x:scroll;width:100%;-ms-overflow-style:none;scrollbar-width:none}.forecast-container[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]   .item-card[_ngcontent-%COMP%]{margin:1rem;padding:1rem;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem}.forecast-container[_ngcontent-%COMP%]::-webkit-scrollbar{display:none}\"], data: { animation: [\n            trigger('fadeIn', [\n                transition('* => *', [\n                    query(':enter', [\n                        style({ opacity: 0, transform: 'translateY(-15px)' }),\n                        stagger('50ms', animate('500ms ease-out', style({ opacity: 1, transform: 'translateY(0px)' }))),\n                    ], { optional: true }),\n                ]),\n            ]),\n        ] } });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WeatherDetailsComponent, [{\n            type: Component,\n            args: [{ selector: 'lib-weather-details', animations: [\n                        trigger('fadeIn', [\n                            transition('* => *', [\n                                query(':enter', [\n                                    style({ opacity: 0, transform: 'translateY(-15px)' }),\n                                    stagger('50ms', animate('500ms ease-out', style({ opacity: 1, transform: 'translateY(0px)' }))),\n                                ], { optional: true }),\n                            ]),\n                        ]),\n                    ], template: \"<div  class=\\\"back-button\\\" routerLink=\\\"/\\\">\\n  <img class=\\\"img\\\" src=\\\"./assets/back.svg\\\">\\n</div>\\n\\n<div class=\\\"forecast-container\\\" *ngIf=\\\"forecasts$ | async as forecasts\\\"  [@fadeIn]=\\\"forecasts.properties.timeseries.length\\\">\\n  <div *ngFor=\\\"let forecast of forecasts.properties.timeseries\\\"  class=\\\"item\\\">\\n    <div class=\\\"item-card\\\">\\n      <div class=\\\"day\\\"><h2>{{this.humanReadableTime(forecast.time)}}</h2></div>\\n      <img src=\\\"./assets/{{ forecast.data.next_1_hours?.summary.symbol_code || 'dont_know' }}.png\\\"  width=\\\"200\\\" height=\\\"200\\\" />\\n      <div class=\\\"temp\\\"><h2>{{forecast.data.instant.details.air_temperature}} C</h2></div>\\n\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".back-button{display:flex;justify-content:center;align-items:flex-start;justify-self:center;height:5rem;width:5rem;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;margin-left:1rem;margin-top:2rem}.back-button img{display:flex;width:2rem;height:2rem;align-self:center}.forecast-container{display:flex;flex-direction:row;overflow-x:scroll;width:100%;-ms-overflow-style:none;scrollbar-width:none}.forecast-container .item .item-card{margin:1rem;padding:1rem;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem}.forecast-container::-webkit-scrollbar{display:none}\\n\"] }]\n        }], function () { return [{ type: WeatherService }]; }, null);\n})();\n\nclass WeatherModule {\n}\nWeatherModule.ɵfac = function WeatherModule_Factory(t) { return new (t || WeatherModule)(); };\nWeatherModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: WeatherModule });\nWeatherModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            NgxSpinnerModule,\n            ReactiveFormsModule,\n            RouterModule.forChild([\n                { path: 'weather', component: WeatherDetailsComponent }\n            ])\n        ]] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WeatherModule, [{\n            type: NgModule,\n            args: [{\n                    declarations: [WeatherButtonComponent, WeatherSetupComponent, WeatherDetailsComponent],\n                    imports: [\n                        CommonModule,\n                        NgxSpinnerModule,\n                        ReactiveFormsModule,\n                        RouterModule.forChild([\n                            { path: 'weather', component: WeatherDetailsComponent }\n                        ])\n                    ],\n                    exports: [WeatherButtonComponent, WeatherSetupComponent]\n                }]\n        }], null, null);\n})();\n(function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(WeatherModule, { declarations: [WeatherButtonComponent, WeatherSetupComponent, WeatherDetailsComponent], imports: [CommonModule,\n            NgxSpinnerModule,\n            ReactiveFormsModule, i2$2.RouterModule], exports: [WeatherButtonComponent, WeatherSetupComponent] });\n})();\n\n/*\n * Public API Surface of yah-weather\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { WeatherButtonComponent, WeatherModule, WeatherService, WeatherSetupComponent };\n","map":{"version":3,"file":"yah-weather.mjs","sources":["../../../projects/yah-weather/src/lib/services/weather.service.ts","../../../projects/yah-weather/src/lib/components/weather-button/weather-button.component.html","../../../projects/yah-weather/src/lib/components/weather-button/weather-button.component.ts","../../../projects/yah-weather/src/lib/components/weather-setup/weather-setup.component.ts","../../../projects/yah-weather/src/lib/components/weather-setup/weather-setup.component.html","../../../projects/yah-weather/src/lib/components/weather-details/weather-details.component.html","../../../projects/yah-weather/src/lib/components/weather-details/weather-details.component.ts","../../../projects/yah-weather/src/lib/weather.module.ts","../../../projects/yah-weather/src/public-api.ts","../../../projects/yah-weather/src/yah-weather.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { concat, EMPTY, NEVER, Observable, of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { delay, map, repeat, switchMap, take, timestamp } from 'rxjs/operators';\nimport { YrNoWeatherForecast } from '../types/yr-no-weather-forecast';\nimport { StorageMap } from '@ngx-pwa/local-storage';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WeatherService {\n  public activated$: Observable<boolean>;\n  public longitude$: Observable<string>;\n  public latitude$: Observable<string>;\n\n  private WEATHER_ACTIVATED_KEY = 'WEATHER_ACTIVATED';\n  private WEATHER_LONGITUDE_KEY = 'WEATHER_LONGITUDE';\n  private WEATHER_LATITUDE_KEY = 'WEATHER_LATITUDE';\n\n  constructor(private http: HttpClient, private localDb: StorageMap) {\n    this.activated$ = localDb\n      .watch(this.WEATHER_ACTIVATED_KEY, {\n        type: 'boolean',\n      })\n      .pipe(\n        map((isActivated) => (isActivated === undefined ? false : isActivated))\n      );\n\n    this.longitude$ = localDb.watch(this.WEATHER_LONGITUDE_KEY, {\n      type: 'string',\n    });\n\n    this.latitude$ = localDb.watch(this.WEATHER_LATITUDE_KEY, {\n      type: 'string',\n    });\n  }\n\n  public getCurrentWeatherInformation(): Observable<YrNoWeatherForecast | undefined>  {\n    return this.activated$.pipe(\n      switchMap((isActivated) => {\n        return isActivated\n          ? this.http.get<YrNoWeatherForecast>(\n            'https://api.met.no/weatherapi/locationforecast/2.0/compact?altitude=69&lat=50.8106855&lon=7.1414209'\n          )\n          : of(undefined);\n      }),\n      timestamp(),\n      switchMap(({timestamp: ts, value: value}) => concat(of(value), EMPTY.pipe(delay(this.timeToNextHourInMs(ts))))\n      ),\n      repeat()\n    );\n  }\n\n  private timeToNextHourInMs(currentTimestampMs: number): number {\n    const timestampSeconds = currentTimestampMs / 1000;\n    const numberOfSecondsIntoTheCurrentHour = timestampSeconds % 3600;\n    const numberOfSecondsToTheNextHour =\n      3600 - numberOfSecondsIntoTheCurrentHour;\n    return numberOfSecondsToTheNextHour * 1000;\n  }\n\n  setActivated(checked: boolean): Observable<null> {\n    return this.localDb.set(this.WEATHER_ACTIVATED_KEY, checked, {\n      type: 'boolean',\n    });\n  }\n\n  setLatitude(lat: string): Observable<null> {\n    return this.localDb.set(this.WEATHER_LATITUDE_KEY, lat, {\n      type: 'string',\n    });\n  }\n\n  setLongitude(long: string): Observable<null> {\n    return this.localDb.set(this.WEATHER_LONGITUDE_KEY, long, {\n      type: 'string',\n    });\n  }\n}\n","<div class=\"box\">\n  <ngx-spinner\n    name=\"weather-spinner\"\n    bdColor=\"rgba(0,0,0,0)\"\n    size=\"medium\"\n    color=\"#fff\"\n    type=\"square-loader\"\n    [fullScreen]=\"false\"\n    ><p style=\"color: white\">Loading...</p></ngx-spinner\n  >\n\n  <div class=\"header\"><img src=\"./assets/clearsky_day.png\" /> Wetter</div>\n\n  <div class=\"forecast next-hour\" *ngIf=\"loaded\">\n    <div>Jetzt</div>\n    <div>\n      <img src=\"./assets/{{ currentIcon ? currentIcon : 'cloudy' }}.png\" />\n      {{ currentDegrees }}&#8451;\n    </div>\n  </div>\n\n  <div class=\"forecast upcoming-weather\" *ngIf=\"loaded\">\n    <div class=\"share-row\">\n      <div class=\"ternary-content\">\n        <div>Nächste Stunde</div>\n        <div>\n          <img class=\"ternary-image\"  src=\"./assets/{{ nextHourIcon ? nextHourIcon : 'cloudy' }}.png\" />\n        </div>\n      </div>\n      <div class=\"ternary-content\">\n        <div>Nächste 12 Stunden</div>\n        <div>\n          <img class=\"ternary-image\" src=\"./assets/{{ next12HoursIcon ? next12HoursIcon : 'cloudy' }}.png\" />\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"refreshed\">\n    Aktualisiert {{lastTimeRefreshed}}\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { WeatherService } from '../../services/weather.service';\nimport { TimeSeries } from '../../types/yr-no-weather-forecast';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'yah-weather-button',\n  templateUrl: './weather-button.component.html',\n  styleUrls: ['./weather-button.component.scss'],\n})\nexport class WeatherButtonComponent implements OnInit, OnDestroy {\n  spinnerName = 'weather-spinner';\n  currentDegrees;\n  currentIcon = null;\n  nextHourIcon = '';\n  next12HoursIcon = '';\n  lastTimeRefreshed = '';\n  private weatherSubscription: Subscription;\n  loaded = false;\n\n  constructor(\n    private spinner: NgxSpinnerService,\n    private weatherService: WeatherService\n  ) {\n    this.spinner.show(this.spinnerName);\n\n    this.weatherSubscription = this.weatherService\n      .getCurrentWeatherInformation()\n      .pipe(\n        filter((res) => Boolean(res)),\n        tap(() => {\n          this.spinner.show(this.spinnerName);\n          this.loaded = false;\n        }),\n        map((res) => res.properties.timeseries[0]),\n        tap(() => this.spinner.hide(this.spinnerName))\n      )\n      .subscribe((timeSeries) => this.setWeatherInformation(timeSeries));\n  }\n\n  private setWeatherInformation(timeSeries: TimeSeries): void {\n    this.loaded = true;\n    this.currentDegrees = timeSeries.data.instant.details.air_temperature;\n    this.currentIcon = timeSeries.data.next_1_hours.summary.symbol_code;\n\n    this.nextHourIcon = timeSeries.data.next_1_hours.summary.symbol_code;\n    this.next12HoursIcon = timeSeries.data.next_12_hours.summary.symbol_code;\n\n    this.lastTimeRefreshed = new Date(timeSeries.time).toLocaleTimeString();\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this.weatherSubscription.unsubscribe();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { WeatherService } from '../../services/weather.service';\nimport { take } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'yah-weather-setup',\n  templateUrl: './weather-setup.component.html',\n  styleUrls: ['./weather-setup.component.scss'],\n})\nexport class WeatherSetupComponent implements OnInit {\n  weatherForm: FormGroup;\n  activated = new FormControl(false);\n  longitude = new FormControl('');\n  latitude = new FormControl('');\n\n  private activatedSubscriptions: Subscription;\n\n  constructor(private weatherService: WeatherService) {\n    this.weatherForm = new FormGroup({\n      activated: this.activated,\n      longitude: this.longitude,\n      latitude: this.latitude,\n    });\n\n    this.activatedSubscriptions = this.weatherService.activated$.subscribe(\n      (isActivated) => {\n        this.weatherForm.get('activated').setValue(isActivated);\n      }\n    );\n\n    this.weatherService.longitude$.subscribe((longitude) => {\n      this.weatherForm.get('longitude').setValue(longitude);\n    });\n\n    this.weatherService.latitude$.subscribe((latitude) => {\n      this.weatherForm.get('latitude').setValue(latitude);\n    });\n  }\n\n  ngOnInit(): void {}\n\n  public setActivated($event: Event): void {\n    const checked = $event.target as HTMLInputElement;\n    this.weatherService.setActivated(checked.checked).subscribe();\n  }\n\n  public setLongitude(): void {\n    const long = this.weatherForm.get('longitude').value;\n    this.weatherService.setLongitude(long).subscribe();\n  }\n\n  public setLatitude(): void {\n    const lat = this.weatherForm.get('latitude').value;\n    this.weatherService.setLatitude(lat).subscribe();\n  }\n}\n","<form [formGroup]=\"weatherForm\">\n  <h2><img src=\"assets/clearsky_day.png\" width=\"32\" /> Wetter Einstellungen</h2>\n  <p class=\"no-margin\">Aktiviert</p>\n  <label class=\"switch\">\n    <input\n      [formControl]=\"activated\"\n      type=\"checkbox\"\n      (change)=\"setActivated($event)\"\n    />\n    <span class=\"slider\"></span>\n  </label>\n\n  <p></p>\n\n  <p class=\"no-margin\">Longitude</p>\n  <div class=\"input-row\">\n    <input\n      type=\"text\"\n      [formControl]=\"longitude\"\n      class=\"input-frosted\"\n      (input)=\"setLongitude()\"\n    />\n    <i class=\"symbol\"></i>\n  </div>\n\n  <p class=\"no-margin\">Latitude</p>\n  <div class=\"input-row\">\n    <input type=\"text\" [formControl]=\"latitude\" class=\"input-frosted\" (input)=\"setLatitude()\" />\n    <i class=\"symbol\"></i>\n  </div>\n</form>\n\n<!-- <div>Icons made by <a href=\"https://www.flaticon.com/authors/pixel-perfect\" title=\"Pixel perfect\">Pixel perfect</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div> -->\n","<div  class=\"back-button\" routerLink=\"/\">\n  <img class=\"img\" src=\"./assets/back.svg\">\n</div>\n\n<div class=\"forecast-container\" *ngIf=\"forecasts$ | async as forecasts\"  [@fadeIn]=\"forecasts.properties.timeseries.length\">\n  <div *ngFor=\"let forecast of forecasts.properties.timeseries\"  class=\"item\">\n    <div class=\"item-card\">\n      <div class=\"day\"><h2>{{this.humanReadableTime(forecast.time)}}</h2></div>\n      <img src=\"./assets/{{ forecast.data.next_1_hours?.summary.symbol_code || 'dont_know' }}.png\"  width=\"200\" height=\"200\" />\n      <div class=\"temp\"><h2>{{forecast.data.instant.details.air_temperature}} C</h2></div>\n\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { WeatherService } from '../../services/weather.service';\nimport {\n  TimeSeries,\n  YrNoWeatherForecast,\n} from '../../types/yr-no-weather-forecast';\nimport { Observable } from 'rxjs';\nimport {animate, query, stagger, style, transition, trigger} from \"@angular/animations\";\n\n@Component({\n  selector: 'lib-weather-details',\n  templateUrl: './weather-details.component.html',\n  styleUrls: ['./weather-details.component.scss'],\n  animations: [\n    trigger('fadeIn', [\n      transition('* => *', [\n        query(\n          ':enter',\n          [\n            style({ opacity: 0, transform: 'translateY(-15px)' }),\n            stagger(\n              '50ms',\n              animate(\n                '500ms ease-out',\n                style({ opacity: 1, transform: 'translateY(0px)' })\n              )\n            ),\n          ],\n          { optional: true }\n        ),\n      ]),\n    ]),\n  ]\n})\nexport class WeatherDetailsComponent implements OnInit {\n  forecasts$: Observable<YrNoWeatherForecast>;\n\n  private weekdays = ['Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.', 'So.'];\n\n  constructor(private readonly weatherService: WeatherService) {\n    this.forecasts$ = weatherService.getCurrentWeatherInformation();\n  }\n\n  ngOnInit(): void {}\n\n  public humanReadableTime(time: Date): string {\n    const boxedDate = new Date(time);\n\n    const day = this.weekdays[boxedDate.getDay()] || '';\n    const minutes =\n      boxedDate.getMinutes() < 10\n        ? '0' + boxedDate.getMinutes().toString()\n        : boxedDate.getMinutes().toString();\n\n    return `${day} ${boxedDate.getHours()}:${minutes}`;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {WeatherButtonComponent} from './components/weather-button/weather-button.component';\nimport {WeatherSetupComponent} from './components/weather-setup/weather-setup.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {NgxSpinnerModule} from 'ngx-spinner';\nimport {RouterModule} from '@angular/router';\nimport { WeatherDetailsComponent } from './components/weather-details/weather-details.component';\n\n\n@NgModule({\n  declarations: [WeatherButtonComponent, WeatherSetupComponent, WeatherDetailsComponent],\n  imports: [\n    CommonModule,\n    NgxSpinnerModule,\n    ReactiveFormsModule,\n    RouterModule.forChild([\n      { path: 'weather', component: WeatherDetailsComponent }\n    ])\n  ],\n  exports: [WeatherButtonComponent, WeatherSetupComponent]\n})\nexport class WeatherModule { }\n","/*\n * Public API Surface of yah-weather\n */\nexport * from './lib/components/weather-button/weather-button.component';\nexport * from './lib/components/weather-setup/weather-setup.component';\nexport * from './lib/services/weather.service';\nexport * from './lib/types/yr-no-weather-forecast';\nexport * from './lib/weather.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}