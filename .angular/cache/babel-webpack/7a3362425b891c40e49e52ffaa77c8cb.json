{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { map, switchMap, timestamp, delay, repeat, filter, tap } from 'rxjs/operators';\nimport * as i1$1 from 'ngx-spinner';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { of, concat, EMPTY } from 'rxjs';\nimport * as i1 from '@angular/common/http';\nimport * as i2 from '@ngx-pwa/local-storage';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2$1 from '@angular/forms';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport * as i2$2 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport { trigger, transition, query, style, stagger, animate } from '@angular/animations';\nlet WeatherService = /*#__PURE__*/(() => {\n  class WeatherService {\n    constructor(http, localDb) {\n      this.http = http;\n      this.localDb = localDb;\n      this.WEATHER_ACTIVATED_KEY = 'WEATHER_ACTIVATED';\n      this.WEATHER_LONGITUDE_KEY = 'WEATHER_LONGITUDE';\n      this.WEATHER_LATITUDE_KEY = 'WEATHER_LATITUDE';\n      this.activated$ = localDb.watch(this.WEATHER_ACTIVATED_KEY, {\n        type: 'boolean'\n      }).pipe(map(isActivated => isActivated === undefined ? false : isActivated));\n      this.longitude$ = localDb.watch(this.WEATHER_LONGITUDE_KEY, {\n        type: 'string'\n      });\n      this.latitude$ = localDb.watch(this.WEATHER_LATITUDE_KEY, {\n        type: 'string'\n      });\n    }\n\n    getCurrentWeatherInformation() {\n      return this.activated$.pipe(switchMap(isActivated => {\n        return isActivated ? this.http.get('https://api.met.no/weatherapi/locationforecast/2.0/compact?altitude=69&lat=50.8106855&lon=7.1414209') : of(undefined);\n      }), timestamp(), switchMap(({\n        timestamp: ts,\n        value: value\n      }) => concat(of(value), EMPTY.pipe(delay(this.timeToNextHourInMs(ts))))), repeat());\n    }\n\n    timeToNextHourInMs(currentTimestampMs) {\n      const timestampSeconds = currentTimestampMs / 1000;\n      const numberOfSecondsIntoTheCurrentHour = timestampSeconds % 3600;\n      const numberOfSecondsToTheNextHour = 3600 - numberOfSecondsIntoTheCurrentHour;\n      return numberOfSecondsToTheNextHour * 1000;\n    }\n\n    setActivated(checked) {\n      return this.localDb.set(this.WEATHER_ACTIVATED_KEY, checked, {\n        type: 'boolean'\n      });\n    }\n\n    setLatitude(lat) {\n      return this.localDb.set(this.WEATHER_LATITUDE_KEY, lat, {\n        type: 'string'\n      });\n    }\n\n    setLongitude(long) {\n      return this.localDb.set(this.WEATHER_LONGITUDE_KEY, long, {\n        type: 'string'\n      });\n    }\n\n  }\n\n  WeatherService.ɵfac = function WeatherService_Factory(t) {\n    return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageMap));\n  };\n\n  WeatherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WeatherService,\n    factory: WeatherService.ɵfac,\n    providedIn: 'root'\n  });\n  return WeatherService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction WeatherButtonComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵtext(2, \"Jetzt\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵelement(4, \"img\", 9);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"./assets/\", ctx_r0.currentIcon ? ctx_r0.currentIcon : \"cloudy\", \".png\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.currentDegrees, \"\\u2103 \");\n  }\n}\n\nfunction WeatherButtonComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelementStart(1, \"div\", 11);\n    i0.ɵɵelementStart(2, \"div\", 12);\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4, \"N\\u00E4chste Stunde\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵelement(6, \"img\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 12);\n    i0.ɵɵelementStart(8, \"div\");\n    i0.ɵɵtext(9, \"N\\u00E4chste 12 Stunden\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\");\n    i0.ɵɵelement(11, \"img\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"./assets/\", ctx_r1.nextHourIcon ? ctx_r1.nextHourIcon : \"cloudy\", \".png\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"./assets/\", ctx_r1.next12HoursIcon ? ctx_r1.next12HoursIcon : \"cloudy\", \".png\", i0.ɵɵsanitizeUrl);\n  }\n}\n\nlet WeatherButtonComponent = /*#__PURE__*/(() => {\n  class WeatherButtonComponent {\n    constructor(spinner, weatherService) {\n      this.spinner = spinner;\n      this.weatherService = weatherService;\n      this.spinnerName = 'weather-spinner';\n      this.currentIcon = null;\n      this.nextHourIcon = '';\n      this.next12HoursIcon = '';\n      this.lastTimeRefreshed = '';\n      this.loaded = false;\n      this.spinner.show(this.spinnerName);\n      this.weatherSubscription = this.weatherService.getCurrentWeatherInformation().pipe(filter(res => Boolean(res)), tap(() => {\n        this.spinner.show(this.spinnerName);\n        this.loaded = false;\n      }), map(res => res.properties.timeseries[0]), tap(() => this.spinner.hide(this.spinnerName))).subscribe(timeSeries => this.setWeatherInformation(timeSeries));\n    }\n\n    setWeatherInformation(timeSeries) {\n      this.loaded = true;\n      this.currentDegrees = timeSeries.data.instant.details.air_temperature;\n      this.currentIcon = timeSeries.data.next_1_hours.summary.symbol_code;\n      this.nextHourIcon = timeSeries.data.next_1_hours.summary.symbol_code;\n      this.next12HoursIcon = timeSeries.data.next_12_hours.summary.symbol_code;\n      this.lastTimeRefreshed = new Date(timeSeries.time).toLocaleTimeString();\n    }\n\n    ngOnInit() {}\n\n    ngOnDestroy() {\n      this.weatherSubscription.unsubscribe();\n    }\n\n  }\n\n  WeatherButtonComponent.ɵfac = function WeatherButtonComponent_Factory(t) {\n    return new (t || WeatherButtonComponent)(i0.ɵɵdirectiveInject(i1$1.NgxSpinnerService), i0.ɵɵdirectiveInject(WeatherService));\n  };\n\n  WeatherButtonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WeatherButtonComponent,\n    selectors: [[\"yah-weather-button\"]],\n    decls: 11,\n    vars: 4,\n    consts: [[1, \"box\"], [\"name\", \"weather-spinner\", \"bdColor\", \"rgba(0,0,0,0)\", \"size\", \"medium\", \"color\", \"#fff\", \"type\", \"square-loader\", 3, \"fullScreen\"], [2, \"color\", \"white\"], [1, \"header\"], [\"src\", \"./assets/clearsky_day.png\"], [\"class\", \"forecast next-hour\", 4, \"ngIf\"], [\"class\", \"forecast upcoming-weather\", 4, \"ngIf\"], [1, \"refreshed\"], [1, \"forecast\", \"next-hour\"], [3, \"src\"], [1, \"forecast\", \"upcoming-weather\"], [1, \"share-row\"], [1, \"ternary-content\"], [1, \"ternary-image\", 3, \"src\"]],\n    template: function WeatherButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"ngx-spinner\", 1);\n        i0.ɵɵelementStart(2, \"p\", 2);\n        i0.ɵɵtext(3, \"Loading...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelement(5, \"img\", 4);\n        i0.ɵɵtext(6, \" Wetter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(7, WeatherButtonComponent_div_7_Template, 6, 2, \"div\", 5);\n        i0.ɵɵtemplate(8, WeatherButtonComponent_div_8_Template, 12, 2, \"div\", 6);\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"fullScreen\", false);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.loaded);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loaded);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" Aktualisiert \", ctx.lastTimeRefreshed, \" \");\n      }\n    },\n    directives: [i1$1.NgxSpinnerComponent, i3.NgIf],\n    styles: [\"[_nghost-%COMP%]{font-size:1.5rem}.box[_ngcontent-%COMP%]{position:relative;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;min-height:20rem;min-width:20rem;transition:all 50ms ease}.box[_ngcontent-%COMP%]:active{box-shadow:0 .4rem 2rem #0000005e}.box[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]{border-radius:.7rem .7rem 0 0;background:#fff;color:#000;font-size:2rem;display:grid;grid-template-columns:20fr 80fr;padding:.5rem 1rem}.box[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:3rem;height:3rem}.box[_ngcontent-%COMP%]   .forecast[_ngcontent-%COMP%]{padding:1rem 0}.box[_ngcontent-%COMP%]   .forecast.next-hour[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center}.box[_ngcontent-%COMP%]   .forecast.next-hour[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;font-weight:900}.box[_ngcontent-%COMP%]   .forecast.next-hour[_ngcontent-%COMP%] > div[_ngcontent-%COMP%] > img[_ngcontent-%COMP%]{align-items:center;width:7rem;height:7rem}.box[_ngcontent-%COMP%]   .forecast.upcoming-weather[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:center}.box[_ngcontent-%COMP%]   .forecast.upcoming-weather[_ngcontent-%COMP%] > .share-row[_ngcontent-%COMP%]{display:grid;grid-template-columns:50fr 50fr;font-size:1rem}.box[_ngcontent-%COMP%]   .forecast.upcoming-weather[_ngcontent-%COMP%] > .share-row[_ngcontent-%COMP%]   .ternary-content[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center}.box[_ngcontent-%COMP%]   .forecast.upcoming-weather[_ngcontent-%COMP%] > .share-row[_ngcontent-%COMP%]   .ternary-image[_ngcontent-%COMP%]{width:5rem;height:5rem}.refreshed[_ngcontent-%COMP%]{font-size:.8rem;font-weight:200;padding:0 .4rem .4rem 0;display:flex;justify-content:flex-end}\"]\n  });\n  return WeatherButtonComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet WeatherSetupComponent = /*#__PURE__*/(() => {\n  class WeatherSetupComponent {\n    constructor(weatherService) {\n      this.weatherService = weatherService;\n      this.activated = new FormControl(false);\n      this.longitude = new FormControl('');\n      this.latitude = new FormControl('');\n      this.weatherForm = new FormGroup({\n        activated: this.activated,\n        longitude: this.longitude,\n        latitude: this.latitude\n      });\n      this.activatedSubscriptions = this.weatherService.activated$.subscribe(isActivated => {\n        this.weatherForm.get('activated').setValue(isActivated);\n      });\n      this.weatherService.longitude$.subscribe(longitude => {\n        this.weatherForm.get('longitude').setValue(longitude);\n      });\n      this.weatherService.latitude$.subscribe(latitude => {\n        this.weatherForm.get('latitude').setValue(latitude);\n      });\n    }\n\n    ngOnInit() {}\n\n    setActivated($event) {\n      const checked = $event.target;\n      this.weatherService.setActivated(checked.checked).subscribe();\n    }\n\n    setLongitude() {\n      const long = this.weatherForm.get('longitude').value;\n      this.weatherService.setLongitude(long).subscribe();\n    }\n\n    setLatitude() {\n      const lat = this.weatherForm.get('latitude').value;\n      this.weatherService.setLatitude(lat).subscribe();\n    }\n\n  }\n\n  WeatherSetupComponent.ɵfac = function WeatherSetupComponent_Factory(t) {\n    return new (t || WeatherSetupComponent)(i0.ɵɵdirectiveInject(WeatherService));\n  };\n\n  WeatherSetupComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WeatherSetupComponent,\n    selectors: [[\"yah-weather-setup\"]],\n    decls: 20,\n    vars: 4,\n    consts: [[3, \"formGroup\"], [\"src\", \"assets/clearsky_day.png\", \"width\", \"32\"], [1, \"no-margin\"], [1, \"switch\"], [\"type\", \"checkbox\", 3, \"formControl\", \"change\"], [1, \"slider\"], [1, \"input-row\"], [\"type\", \"text\", 1, \"input-frosted\", 3, \"formControl\", \"input\"], [1, \"symbol\"]],\n    template: function WeatherSetupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"h2\");\n        i0.ɵɵelement(2, \"img\", 1);\n        i0.ɵɵtext(3, \" Wetter Einstellungen\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"p\", 2);\n        i0.ɵɵtext(5, \"Aktiviert\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"label\", 3);\n        i0.ɵɵelementStart(7, \"input\", 4);\n        i0.ɵɵlistener(\"change\", function WeatherSetupComponent_Template_input_change_7_listener($event) {\n          return ctx.setActivated($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"span\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"p\");\n        i0.ɵɵelementStart(10, \"p\", 2);\n        i0.ɵɵtext(11, \"Longitude\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 6);\n        i0.ɵɵelementStart(13, \"input\", 7);\n        i0.ɵɵlistener(\"input\", function WeatherSetupComponent_Template_input_input_13_listener() {\n          return ctx.setLongitude();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"i\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 2);\n        i0.ɵɵtext(16, \"Latitude\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 6);\n        i0.ɵɵelementStart(18, \"input\", 7);\n        i0.ɵɵlistener(\"input\", function WeatherSetupComponent_Template_input_input_18_listener() {\n          return ctx.setLatitude();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"i\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.weatherForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formControl\", ctx.activated);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formControl\", ctx.longitude);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.latitude);\n      }\n    },\n    directives: [i2$1.ɵNgNoValidate, i2$1.NgControlStatusGroup, i2$1.FormGroupDirective, i2$1.CheckboxControlValueAccessor, i2$1.NgControlStatus, i2$1.FormControlDirective, i2$1.DefaultValueAccessor],\n    styles: [\"form[_ngcontent-%COMP%]{display:flex;justify-content:center;flex-direction:column}form[_ngcontent-%COMP%]   .no-margin[_ngcontent-%COMP%]{margin:0}form[_ngcontent-%COMP%]   .input-row[_ngcontent-%COMP%]{display:flex;align-items:center}form[_ngcontent-%COMP%]   .input-row[_ngcontent-%COMP%]   .input-frosted[_ngcontent-%COMP%]{color:#fff;font-size:1.4rem;font-weight:800;padding:1rem;border:none;background:rgba(255,255,255,.4);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;max-width:90%}.switch[_ngcontent-%COMP%]{position:relative;display:inline-block;width:60px;height:34px}.switch[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{opacity:0;width:0;height:0}.slider[_ngcontent-%COMP%]{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;transition:.4s}.slider[_ngcontent-%COMP%]:before{position:absolute;content:\\\"\\\";height:26px;width:26px;left:4px;bottom:4px;background-color:#fff;transition:.4s}input[_ngcontent-%COMP%]:checked + .slider[_ngcontent-%COMP%]{background-color:#2196f3}input[_ngcontent-%COMP%]:focus + .slider[_ngcontent-%COMP%]{box-shadow:0 0 1px #2196f3}input[_ngcontent-%COMP%]:checked + .slider[_ngcontent-%COMP%]:before{transform:translate(26px)}\"]\n  });\n  return WeatherSetupComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction WeatherDetailsComponent_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵelementStart(2, \"div\", 7);\n    i0.ɵɵelementStart(3, \"h2\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"img\", 8);\n    i0.ɵɵelementStart(6, \"div\", 9);\n    i0.ɵɵelementStart(7, \"h2\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const forecast_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r2.humanReadableTime(forecast_r3.time));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"./assets/\", (forecast_r3.data.next_1_hours == null ? null : forecast_r3.data.next_1_hours.summary.symbol_code) || \"dont_know\", \".png\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", forecast_r3.data.instant.details.air_temperature, \" C\");\n  }\n}\n\nfunction WeatherDetailsComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, WeatherDetailsComponent_div_2_div_1_Template, 9, 3, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const forecasts_r1 = ctx.ngIf;\n    i0.ɵɵproperty(\"@fadeIn\", forecasts_r1.properties.timeseries.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", forecasts_r1.properties.timeseries);\n  }\n}\n\nlet WeatherDetailsComponent = /*#__PURE__*/(() => {\n  class WeatherDetailsComponent {\n    constructor(weatherService) {\n      this.weatherService = weatherService;\n      this.weekdays = ['Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.', 'So.'];\n      this.forecasts$ = weatherService.getCurrentWeatherInformation();\n    }\n\n    ngOnInit() {}\n\n    humanReadableTime(time) {\n      const boxedDate = new Date(time);\n      const day = this.weekdays[boxedDate.getDay()] || '';\n      const minutes = boxedDate.getMinutes() < 10 ? '0' + boxedDate.getMinutes().toString() : boxedDate.getMinutes().toString();\n      return `${day} ${boxedDate.getHours()}:${minutes}`;\n    }\n\n  }\n\n  WeatherDetailsComponent.ɵfac = function WeatherDetailsComponent_Factory(t) {\n    return new (t || WeatherDetailsComponent)(i0.ɵɵdirectiveInject(WeatherService));\n  };\n\n  WeatherDetailsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WeatherDetailsComponent,\n    selectors: [[\"lib-weather-details\"]],\n    decls: 4,\n    vars: 3,\n    consts: [[\"routerLink\", \"/\", 1, \"back-button\"], [\"src\", \"./assets/back.svg\", 1, \"img\"], [\"class\", \"forecast-container\", 4, \"ngIf\"], [1, \"forecast-container\"], [\"class\", \"item\", 4, \"ngFor\", \"ngForOf\"], [1, \"item\"], [1, \"item-card\"], [1, \"day\"], [\"width\", \"200\", \"height\", \"200\", 3, \"src\"], [1, \"temp\"]],\n    template: function WeatherDetailsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"img\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, WeatherDetailsComponent_div_2_Template, 2, 2, \"div\", 2);\n        i0.ɵɵpipe(3, \"async\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(3, 1, ctx.forecasts$));\n      }\n    },\n    directives: [i2$2.RouterLink, i3.NgIf, i3.NgForOf],\n    pipes: [i3.AsyncPipe],\n    styles: [\".back-button[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:flex-start;justify-self:center;height:5rem;width:5rem;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem;margin-left:1rem;margin-top:2rem}.back-button[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{display:flex;width:2rem;height:2rem;align-self:center}.forecast-container[_ngcontent-%COMP%]{display:flex;flex-direction:row;overflow-x:scroll;width:100%;-ms-overflow-style:none;scrollbar-width:none}.forecast-container[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]   .item-card[_ngcontent-%COMP%]{margin:1rem;padding:1rem;background:rgba(255,255,255,.25);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(.2rem);-webkit-backdrop-filter:blur(.2rem);border-radius:.7rem}.forecast-container[_ngcontent-%COMP%]::-webkit-scrollbar{display:none}\"],\n    data: {\n      animation: [trigger('fadeIn', [transition('* => *', [query(':enter', [style({\n        opacity: 0,\n        transform: 'translateY(-15px)'\n      }), stagger('50ms', animate('500ms ease-out', style({\n        opacity: 1,\n        transform: 'translateY(0px)'\n      })))], {\n        optional: true\n      })])])]\n    }\n  });\n  return WeatherDetailsComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet WeatherModule = /*#__PURE__*/(() => {\n  class WeatherModule {}\n\n  WeatherModule.ɵfac = function WeatherModule_Factory(t) {\n    return new (t || WeatherModule)();\n  };\n\n  WeatherModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: WeatherModule\n  });\n  WeatherModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, NgxSpinnerModule, ReactiveFormsModule, RouterModule.forChild([{\n      path: 'weather',\n      component: WeatherDetailsComponent\n    }])]]\n  });\n  return WeatherModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(WeatherModule, {\n    declarations: [WeatherButtonComponent, WeatherSetupComponent, WeatherDetailsComponent],\n    imports: [CommonModule, NgxSpinnerModule, ReactiveFormsModule, i2$2.RouterModule],\n    exports: [WeatherButtonComponent, WeatherSetupComponent]\n  });\n})();\n/*\n * Public API Surface of yah-weather\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { WeatherButtonComponent, WeatherModule, WeatherService, WeatherSetupComponent }; //# sourceMappingURL=yah-weather.mjs.map","map":null,"metadata":{},"sourceType":"module"}