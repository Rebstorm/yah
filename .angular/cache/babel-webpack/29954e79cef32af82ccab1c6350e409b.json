{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { TemplateRef, Component, ChangeDetectionStrategy, Input, NgModule, Directive, ViewContainerRef, ɵɵdefineInjectable, Injectable, ɵɵinject, ComponentFactoryResolver, INJECTOR, ApplicationRef, Injector } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction DynamicContentComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r0.content, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction DynamicContentComponent_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction DynamicContentComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, DynamicContentComponent_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.content)(\"ngTemplateOutletContext\", ctx_r1.context);\n  }\n}\n\nfunction DynamicContentComponent_ng_container_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction DynamicContentComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, DynamicContentComponent_ng_container_3_ng_container_1_Template, 1, 0, \"ng-container\", 5);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngComponentOutlet\", ctx_r2.content)(\"ngComponentOutletInjector\", ctx_r2.injector);\n  }\n}\n\nvar ContentType = /*#__PURE__*/(() => {\n  (function (ContentType) {\n    ContentType[ContentType[\"String\"] = 0] = \"String\";\n    ContentType[ContentType[\"Template\"] = 1] = \"Template\";\n    ContentType[ContentType[\"Component\"] = 2] = \"Component\";\n  })(ContentType || (ContentType = {}));\n\n  return ContentType;\n})();\nlet DynamicContentComponent = /*#__PURE__*/(() => {\n  class DynamicContentComponent {\n    constructor() {\n      this.ContentType = ContentType;\n      this.contentType = ContentType.String;\n    }\n\n    set content(contentType) {\n      this._content = contentType;\n      this.resolveContentType();\n    }\n\n    get content() {\n      return this._content;\n    }\n\n    resolveContentType() {\n      if (typeof this.content === 'string') {\n        this.contentType = ContentType.String;\n      } else if (this.content instanceof TemplateRef) {\n        this.contentType = ContentType.Template;\n      } else {\n        this.contentType = ContentType.Component;\n      }\n    }\n\n  }\n\n  DynamicContentComponent.ɵfac = function DynamicContentComponent_Factory(t) {\n    return new (t || DynamicContentComponent)();\n  };\n\n  DynamicContentComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DynamicContentComponent,\n    selectors: [[\"dynamic-content\"]],\n    inputs: {\n      content: \"content\",\n      context: \"context\",\n      injector: \"injector\"\n    },\n    decls: 4,\n    vars: 4,\n    consts: [[3, \"ngSwitch\"], [3, \"innerHTML\", 4, \"ngSwitchCase\"], [4, \"ngSwitchCase\"], [3, \"innerHTML\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngComponentOutlet\", \"ngComponentOutletInjector\"]],\n    template: function DynamicContentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, DynamicContentComponent_div_1_Template, 1, 1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, DynamicContentComponent_ng_container_2_Template, 2, 2, \"ng-container\", 2);\n        ɵngcc0.ɵɵtemplate(3, DynamicContentComponent_ng_container_3_Template, 2, 2, \"ng-container\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.contentType);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", ctx.ContentType.String);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", ctx.ContentType.Template);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", ctx.ContentType.Component);\n      }\n    },\n    directives: [ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgComponentOutlet],\n    styles: [\"[_nghost-%COMP%] {\\n        display: block;\\n      }\"],\n    changeDetection: 0\n  });\n  return DynamicContentComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DynamicContentModule = /*#__PURE__*/(() => {\n  class DynamicContentModule {}\n\n  DynamicContentModule.ɵfac = function DynamicContentModule_Factory(t) {\n    return new (t || DynamicContentModule)();\n  };\n\n  DynamicContentModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DynamicContentModule\n  });\n  DynamicContentModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return DynamicContentModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DynamicContentModule, {\n    declarations: function () {\n      return [DynamicContentComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [DynamicContentComponent];\n    }\n  });\n})();\n\nlet TemplateOrStringDirective = /*#__PURE__*/(() => {\n  class TemplateOrStringDirective {\n    constructor(defaultTpl, vcr) {\n      this.defaultTpl = defaultTpl;\n      this.vcr = vcr;\n    }\n\n    set templateOrStringContext(context) {\n      this.context = context;\n    }\n\n    ngOnInit() {\n      const template = this.content instanceof TemplateRef ? this.content : this.defaultTpl;\n      this.vcr.createEmbeddedView(template, this.context);\n    }\n\n  }\n\n  TemplateOrStringDirective.ɵfac = function TemplateOrStringDirective_Factory(t) {\n    return new (t || TemplateOrStringDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  TemplateOrStringDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TemplateOrStringDirective,\n    selectors: [[\"\", \"templateOrString\", \"\"]],\n    inputs: {\n      templateOrStringContext: \"templateOrStringContext\",\n      content: [\"templateOrString\", \"content\"]\n    }\n  });\n  return TemplateOrStringDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TemplateOrStringModule = /*#__PURE__*/(() => {\n  class TemplateOrStringModule {}\n\n  TemplateOrStringModule.ɵfac = function TemplateOrStringModule_Factory(t) {\n    return new (t || TemplateOrStringModule)();\n  };\n\n  TemplateOrStringModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TemplateOrStringModule\n  });\n  TemplateOrStringModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TemplateOrStringModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TemplateOrStringModule, {\n    declarations: [TemplateOrStringDirective],\n    exports: [TemplateOrStringDirective]\n  });\n})();\n\nlet TeleportService = /*#__PURE__*/(() => {\n  class TeleportService {\n    constructor() {\n      this.outlets = new BehaviorSubject('');\n      this.asObservable = this.outlets.asObservable();\n      this.ports = new Map();\n    }\n\n    outlet$(name) {\n      return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));\n    }\n\n    newOutlet(name) {\n      this.outlets.next(name);\n    }\n\n  }\n\n  TeleportService.ɵfac = function TeleportService_Factory(t) {\n    return new (t || TeleportService)();\n  };\n\n  TeleportService.ɵprov = ɵɵdefineInjectable({\n    factory: function TeleportService_Factory() {\n      return new TeleportService();\n    },\n    token: TeleportService,\n    providedIn: \"root\"\n  });\n  return TeleportService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TeleportOutletDirective = /*#__PURE__*/(() => {\n  class TeleportOutletDirective {\n    constructor(vcr, service) {\n      this.vcr = vcr;\n      this.service = service;\n    }\n\n    ngOnInit() {\n      this.service.ports.set(this.teleportOutlet, this.vcr);\n      this.service.newOutlet(this.teleportOutlet);\n    }\n\n    ngOnDestroy() {\n      this.service.ports.delete(this.teleportOutlet);\n    }\n\n  }\n\n  TeleportOutletDirective.ɵfac = function TeleportOutletDirective_Factory(t) {\n    return new (t || TeleportOutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(TeleportService));\n  };\n\n  TeleportOutletDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TeleportOutletDirective,\n    selectors: [[\"\", \"teleportOutlet\", \"\"]],\n    inputs: {\n      teleportOutlet: \"teleportOutlet\"\n    }\n  });\n  return TeleportOutletDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TeleportDirective = /*#__PURE__*/(() => {\n  class TeleportDirective {\n    constructor(tpl, service) {\n      this.tpl = tpl;\n      this.service = service;\n    }\n\n    ngOnInit() {\n      this.subscription = this.service.outlet$(this.teleportTo).subscribe(outlet => {\n        if (outlet) {\n          this.viewRef = outlet.createEmbeddedView(this.tpl);\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      var _a, _b;\n\n      (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      (_b = this.viewRef) === null || _b === void 0 ? void 0 : _b.destroy();\n    }\n\n  }\n\n  TeleportDirective.ɵfac = function TeleportDirective_Factory(t) {\n    return new (t || TeleportDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(TeleportService));\n  };\n\n  TeleportDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TeleportDirective,\n    selectors: [[\"\", \"teleportTo\", \"\"]],\n    inputs: {\n      teleportTo: \"teleportTo\"\n    }\n  });\n  return TeleportDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TeleportModule = /*#__PURE__*/(() => {\n  class TeleportModule {}\n\n  TeleportModule.ɵfac = function TeleportModule_Factory(t) {\n    return new (t || TeleportModule)();\n  };\n\n  TeleportModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TeleportModule\n  });\n  TeleportModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TeleportModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TeleportModule, {\n    declarations: [TeleportDirective, TeleportOutletDirective],\n    exports: [TeleportDirective, TeleportOutletDirective]\n  });\n})();\n\nclass StringRef {\n  constructor(value) {\n    this.value = value;\n  }\n\n  getElement() {\n    return this.value;\n  }\n\n  detectChanges() {}\n\n  destroy() {}\n\n}\n\nclass CompRef {\n  constructor(args) {\n    this.args = args;\n    const factory = this.args.resolver.resolveComponentFactory(this.args.component);\n\n    if (this.args.vcr) {\n      this.compRef = this.args.vcr.createComponent(factory, this.args.vcr.length, args.injector || this.args.vcr.injector);\n    } else {\n      this.compRef = factory.create(this.args.injector);\n      this.args.appRef.attachView(this.compRef.hostView);\n    }\n  }\n\n  get ref() {\n    return this.compRef;\n  }\n\n  setInput(input, value) {\n    this.compRef.instance[input] = value;\n    return this;\n  }\n\n  setInputs(inputs) {\n    Object.keys(inputs).forEach(input => {\n      this.compRef.instance[input] = inputs[input];\n    });\n    return this;\n  }\n\n  detectChanges() {\n    this.compRef.hostView.detectChanges();\n    return this;\n  }\n\n  appendTo(container) {\n    container.appendChild(this.getElement());\n    return this;\n  }\n\n  removeFrom(container) {\n    container.removeChild(this.getElement());\n    return this;\n  }\n\n  getRawContent() {\n    return this.getElement().outerHTML;\n  }\n\n  getElement() {\n    return this.compRef.location.nativeElement;\n  }\n\n  destroy() {\n    this.compRef.destroy();\n    !this.args.vcr && this.args.appRef.detachView(this.compRef.hostView);\n    this.compRef = null;\n  }\n\n}\n\nclass TplRef {\n  constructor(args) {\n    this.args = args;\n    this.wrapper = null;\n\n    if (this.args.vcr) {\n      this.viewRef = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {});\n      this.viewRef.detectChanges();\n    } else {\n      this.viewRef = this.args.tpl.createEmbeddedView(this.args.context || {});\n      this.viewRef.detectChanges();\n      this.args.appRef.attachView(this.viewRef);\n    }\n  }\n\n  detectChanges() {\n    this.viewRef.detectChanges();\n  }\n\n  getElement() {\n    const rootNodes = this.viewRef.rootNodes;\n\n    if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {\n      this.element = rootNodes[0];\n    } else {\n      this.element = document.createElement('div');\n      this.element.append(...rootNodes);\n    }\n\n    return this.element;\n  }\n\n  destroy() {\n    if (this.viewRef.rootNodes[0] !== 1) {\n      this.element.parentNode.removeChild(this.element);\n      this.element = null;\n    }\n\n    if (!this.args.vcr) {\n      this.args.appRef.detachView(this.viewRef);\n    }\n\n    this.viewRef.destroy();\n    this.viewRef = null;\n  }\n\n}\n\nfunction isTemplateRef(value) {\n  return value instanceof TemplateRef;\n}\n\nfunction isComponent(value) {\n  return typeof value === 'function';\n}\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nlet ViewService = /*#__PURE__*/(() => {\n  class ViewService {\n    constructor(resolver, injector, appRef) {\n      this.resolver = resolver;\n      this.injector = injector;\n      this.appRef = appRef;\n    }\n\n    createComponent(component, options = {}) {\n      return new CompRef({\n        component,\n        vcr: options.vcr,\n        injector: options.injector || this.injector,\n        appRef: this.appRef,\n        resolver: this.resolver\n      });\n    }\n\n    createTemplate(tpl, options = {}) {\n      return new TplRef({\n        vcr: options.vcr,\n        appRef: this.appRef,\n        tpl,\n        context: options.context\n      });\n    }\n\n    createView(content, viewOptions = {}) {\n      if (isTemplateRef(content)) {\n        return this.createTemplate(content, viewOptions);\n      } else if (isComponent(content)) {\n        return this.createComponent(content, viewOptions);\n      } else if (isString(content)) {\n        return new StringRef(content);\n      } else {\n        throw 'Type of content is not supported';\n      }\n    }\n\n  }\n\n  ViewService.ɵfac = function ViewService_Factory(t) {\n    return new (t || ViewService)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef));\n  };\n\n  ViewService.ɵprov = ɵɵdefineInjectable({\n    factory: function ViewService_Factory() {\n      return new ViewService(ɵɵinject(ComponentFactoryResolver), ɵɵinject(INJECTOR), ɵɵinject(ApplicationRef));\n    },\n    token: ViewService,\n    providedIn: \"root\"\n  });\n  return ViewService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of overview\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CompRef, DynamicContentModule, StringRef, TeleportModule, TemplateOrStringModule, TplRef, ViewService, isComponent, isString, isTemplateRef, DynamicContentComponent as ɵa, TemplateOrStringDirective as ɵb, TeleportDirective as ɵc, TeleportService as ɵd, TeleportOutletDirective as ɵe }; //# sourceMappingURL=ngneat-overview.js.map","map":null,"metadata":{},"sourceType":"module"}